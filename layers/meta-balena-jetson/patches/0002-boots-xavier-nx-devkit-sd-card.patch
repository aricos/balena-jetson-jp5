From 113d4696f9dbd5f35eb0ff4df2917d551c4f1e34 Mon Sep 17 00:00:00 2001
From: Alexandru Costache <alexandru@balena.io>
Date: Wed, 28 Dec 2022 17:02:29 +0100
Subject: [PATCH 02/11] boots xavier nx devkit sd-card

---
 .../files/boot0_t194_agx_sd.bindiff           |   0
 .../files/partition_specification194_nxde.txt |   4 +-
 ...partition_specification194_nxde_sdcard.txt |  10 +-
 .../files/resinOS-flash194_nxde_sdcard.xml    | 515 ++++++++-------
 .../tegra194-flash-dry_35.1.0.bb              |   2 +-
 .../tegra194-nxde-flash-dry_35.1.0.bb         | 354 +++--------
 .../tegra194-nxde-sdcard-flash_35.1.0.bb      | 409 ++++--------
 ...d-hup-and-rollback-support-xav-nx-sd.patch | 592 ++++++++++++++++++
 .../uefi/edk2-firmware-tegra_35.1.0.bbappend  |   4 +
 .../recipes-core/images/balena-image.bbappend |  41 ++
 .../recipes-core/images/balena-image.inc      |   6 +
 11 files changed, 1121 insertions(+), 816 deletions(-)
 create mode 100644 layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/boot0_t194_agx_sd.bindiff
 create mode 100644 layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra/0007-Add-hup-and-rollback-support-xav-nx-sd.patch

diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/boot0_t194_agx_sd.bindiff b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/boot0_t194_agx_sd.bindiff
new file mode 100644
index 0000000..e69de29
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde.txt b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde.txt
index e27ff93..e3d379d 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde.txt
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde.txt
@@ -1,5 +1,5 @@
-kernel:boot_sigheader.img.encrypt:67108864
-kernel_b:boot_sigheader.img.encrypt:67108864
+kernel:none.bin:67108864
+kernel_b:none.bin:67108864
 kernel-dtb:[DTBNAME]_sigheader.dtb.encrypt:524288
 kernel-dtb_b:[DTBNAME]_sigheader.dtb.encrypt:524288
 recovery-dtb:[DTBNAME]_sigheader.dtb.encrypt:524288
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde_sdcard.txt b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde_sdcard.txt
index e27ff93..606e3f7 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde_sdcard.txt
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/partition_specification194_nxde_sdcard.txt
@@ -1,8 +1,8 @@
-kernel:boot_sigheader.img.encrypt:67108864
-kernel_b:boot_sigheader.img.encrypt:67108864
-kernel-dtb:[DTBNAME]_sigheader.dtb.encrypt:524288
-kernel-dtb_b:[DTBNAME]_sigheader.dtb.encrypt:524288
-recovery-dtb:[DTBNAME]_sigheader.dtb.encrypt:524288
+kernel:none.bin.encrypt:67108864
+kernel_b:none.bin:67108864
+kernel-dtb:[DTB_NAME].dtb:524288
+kernel-dtb_b:[DTB_NAME].dtb:524288
+recovery-dtb:[DTB_NAME].dtb:524288
 kernel-bootctrl:none.bin:262144
 kernel-bootctrl_b:none.bin:262144
 PADDING:none.bin:333426688
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/resinOS-flash194_nxde_sdcard.xml b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/resinOS-flash194_nxde_sdcard.xml
index 427e3f1..0a16585 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/resinOS-flash194_nxde_sdcard.xml
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/files/resinOS-flash194_nxde_sdcard.xml
@@ -1,3 +1,7 @@
+<?xml version="1.0"?>
+
+<!-- Nvidia Tegra Partition Layout Version 1.0.0 -->
+
 <partition_layout version="01.00.0000">
     <device instance="0" type="spi" sector_size="512" num_sectors="65536">
         <partition name="BCT" type="boot_config_table">
@@ -13,459 +17,436 @@
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> MB1FILE </filename>
-            <description> **Required.** Slot A; contains NVIDIA signed MB1 binary. </description>
+            <description> **Required.** Chain A; contains NVIDIA signed MB1 binary. </description>
         </partition>
         <partition name="mb1_b" type="mb1_bootloader">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> MB1FILE </filename>
-            <description> **Required.** Slot B; contains NVIDIA signed MB1 binary. </description>
+            <description> **Required.** Chain B; contains NVIDIA signed MB1 binary. </description>
         </partition>
         <partition name="MB1_BCT" type="mb1_boot_config_table">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <description> **Required.** Slot A; contains MB1 boot configuration table. </description>
-        </partition>
-        <partition name="MB1_BCT_b" type="mb1_boot_config_table">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 65536 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <description> **Required.** Slot B; contains MB1 boot configuration table. </description>
+            <description> **Required.** Chain A; contains MB1 boot configuration table.
+              </description>
         </partition>
         <partition name="MEM_BCT" type="mem_boot_config_table">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <description> **Required.** Slot A; contains memory configuration table. </description>
-        </partition>
-        <partition name="MEM_BCT_b" type="mem_boot_config_table">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 262144 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <description> **Required.** Slot B; contains memory configuration table. </description>
+            <description> **Required.** Chain A; contains memory configuration table. </description>
         </partition>
         <partition name="spe-fw" type="spe_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> SPEFILE </filename>
-            <description> **Required.** Slot A; contains BPMP SPE-FW binary. </description>
-        </partition>
-        <partition name="spe-fw_b" type="spe_fw" oem_sign="true">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 262144 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <filename> SPEFILE </filename>
-            <description> **Required.** Slot B; contains BPMP SPE-FW binary. </description>
+            <description> **Required.** Chain A; contains BPMP SPE-FW binary. </description>
         </partition>
         <partition name="mb2" type="mb2_bootloader" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> TEGRABOOT </filename>
-            <description> **Required.** Slot A; contains TegraBoot binary. </description>
-        </partition>
-        <partition name="mb2_b" type="mb2_bootloader" oem_sign="true">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 262144 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <filename> TEGRABOOT </filename>
-            <description> **Required.** Slot B; contains TegraBoot binary. </description>
+            <description> **Required.** Chain A; contains TegraBoot binary. </description>
         </partition>
         <partition name="mts-preboot" type="mts_preboot" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> MTSPREBOOT </filename>
-            <description> **Required.** Slot A; contains Denver preboot firmware. </description>
-        </partition>
-        <partition name="mts-preboot_b" type="mts_preboot" oem_sign="true">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 65536 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <filename> MTSPREBOOT </filename>
-            <description> **Required.** Slot B; contains Denver preboot firmware. </description>
+            <description> **Required.** Chain A; contains Denver preboot firmware. </description>
         </partition>
         <partition name="mts-mce" type="mts_mce" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 196608 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> MTS_MCE </filename>
-            <description> **Required.** Slot A; contains microcode associated with boot, power management,
-              and clocks. </description>
-        </partition>
-        <partition name="mts-mce_b" type="mts_mce" oem_sign="true">
-            <allocation_policy> sequential </allocation_policy>
-            <filesystem_type> basic </filesystem_type>
-            <size> 196608 </size>
-            <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
-            <percent_reserved> 0 </percent_reserved>
-            <filename> MTS_MCE </filename>
-            <description> **Required.** Slot B; contains microcode associated with boot, power management,
-              and clocks. </description>
+            <description> **Required.** Chain A; contains microcode associated with boot, power
+              management, and clocks. </description>
         </partition>
         <partition name="mts-proper" type="mts_proper" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 4194304 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> MTSPROPER </filename>
-            <description> **Required.** Slot A; contains microcode associated with execution
+            <description> **Required.** Chain A; contains microcode associated with execution
               and optimization of ARM code. </description>
         </partition>
-        <partition name="mts-proper_b" type="mts_proper" oem_sign="true">
+        <partition name="sc7" type="WB0" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 4194304 </size>
+            <size> 131072 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> MTSPROPER </filename>
-            <description> **Required.** Slot B; contains microcode associated with execution
-              and optimization of ARM code. </description>
+            <filename> WB0BOOT </filename>
+            <description> **Required.** Chain A; contains warm boot firmware. </description>
         </partition>
-        <partition name="sc7" type="WB0" oem_sign="true">
+        <partition name="xusb-fw" type="xusb_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 131072 </size>
+            <size> 196608 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> WB0BOOT </filename>
-            <description> **Required.** Slot A; contains warm boot firmware. </description>
+            <filename> xusb_sil_rel_fw </filename>
+            <description> **Required.** Chain A; contains XUSB firmware file, making XUSB
+              a true USB 3.0 compliant host controller. </description>
         </partition>
-        <partition name="sc7_b" type="WB0" oem_sign="true">
+        <partition name="cpu-bootloader" type="bootloader_stage2" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 131072 </size>
+            <size> 4194304 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> WB0BOOT </filename>
-            <description> **Required.** Slot B; contains warm boot firmware. </description>
+            <filename> TBCFILE </filename>
+            <description> **Required.** Chain A; contains UEFI, the final boot stage CPU Bootloader
+              binary that loads the binary in the kernel partition.  </description>
         </partition>
-        <partition name="SMD" type="smd">
+        <partition name="bootloader-dtb" type="bl_dtb" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 4096 </size>
+            <size> 458752 </size>
             <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> slot_metadata.bin </filename>
-            <description> **Required.** Slot A; contains slot status for A/B boot and A/B
-              update. </description>
+            <filename> DTB_NAME </filename>
+            <description> **Required.** Chain A; contains Bootloader device tree blob
+              (DTB). </description>
         </partition>
-        <partition name="SMD_b" type="smd">
+        <partition name="secure-os" type="tos" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 4096 </size>
+            <size> 2621440 </size>
             <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> slot_metadata.bin </filename>
-            <description> **Required.** Slot B; contains slot status for A/B boot and A/B
-              update. </description>
+            <filename> TOSFILE </filename>
+            <description> **Required.** Chain A; contains the trusted OS. </description>
         </partition>
-        <partition name="xusb-fw" type="xusb_fw">
+        <partition name="eks" type="eks" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 196608 </size>
+            <size> 65536 </size>
             <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> xusb_sil_rel_fw </filename>
-            <description> **Required.** Slot A; contains XUSB module’s firmware file, making XUSB
-              a true USB 3.0 compliant host controller. </description>
+            <filename> EKSFILE </filename>
+            <description> **Required.** Chain A; contains the encrypted keys. </description>
         </partition>
-        <partition name="xusb-fw_b" type="xusb_fw">
+        <partition name="adsp-fw" type="ape_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 196608 </size>
+            <size> 1048576 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> xusb_sil_rel_fw </filename>
-            <description> **Required.** Slot B; contains XUSB module’s firmware file, making XUSB
-              a true USB 3.0 compliant host controller. </description>
+            <filename> adsp-fw.bin </filename>
+            <description> **Required.** Chain A; contains ADSP software. </description>
         </partition>
-        <partition name="cpu-bootloader" type="bootloader" oem_sign="true">
+        <partition name="rce-fw" type="rce_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1441792 </size>
+            <size> 1048576 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TBCFILE </filename>
-            <description> **Required.** Slot A; contains CBoot, the final boot stage CPU Bootloader
-              binary that loads the binary in the kernel partition.  </description>
+            <filename> CAMERAFW </filename>
+            <description> **Required.** Chain A; contains `camera-rtcpu-rce` firmware. </description>
         </partition>
-        <partition name="cpu-bootloader_b" type="bootloader" oem_sign="true">
+        <partition name="sce-fw" type="sce_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1441792 </size>
+            <size> 1048576 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TBCFILE </filename>
-            <description> **Required.** Slot B; contains CBoot, the final boot stage CPU Bootloader
-              binary that loads the binary in the kernel partition.  </description>
+<!--            <filename> sce-fw.bin </filename>	-->
+            <description> **Required.** Chain A; contains `camera-rtcpu-sce` firmware. </description>
         </partition>
-        <partition name="bootloader-dtb" type="data" oem_sign="true">
+        <partition name="bpmp-fw" type="bpmp_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 458752 </size>
+            <size> 1572864 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TBCDTB-FILE </filename>
-            <description> **Required.** Slot A; contains Bootloader device tree blob
-              (DTB). </description>
+            <filename> BPFFILE </filename>
+            <description> **Required.** Chain A; contains BPMP firmware. </description>
         </partition>
-        <partition name="bootloader-dtb_b" type="data" oem_sign="true">
+        <partition name="bpmp-fw-dtb" type="bpmp_fw_dtb" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 458752 </size>
+            <size> 1048576 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TBCDTB-FILE </filename>
-            <description> **Required.** Slot B; contains Bootloader device tree blob
+            <filename> BPFDTB_FILE </filename>
+            <description> **Required.** Chain A; contains BPMP firmware device tree blob
               (DTB). </description>
         </partition>
-        <partition name="BMP" type="data">
+        <partition name="reserved_for_chain_A_boot" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 196608 </size>
+            <size> 2097152 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> bmp.blob </filename>
-            <description> **Optional.** Slot A; contains BMP images for splash screen display during
-              boot. </description>
+            <description> **Required.** Reserved space for chain A on boot device. </description>
         </partition>
-        <partition name="BMP_b" type="data">
+        <partition name="MB1_BCT_b" type="mb1_boot_config_table">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 196608 </size>
+            <start_location> 0x1480000 </start_location>
+            <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> bmp.blob </filename>
-            <description> **Optional.** Slot B; contains BMP images for splash screen display during
-              boot. </description>
+            <description> **Required.** Chain B; contains MB1 boot configuration table.
+              </description>
         </partition>
-        <partition name="secure-os" type="data" oem_sign="true">
+        <partition name="MEM_BCT_b" type="mem_boot_config_table">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 2621440 </size>
+            <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TOSFILE </filename>
-            <description> **Required.** Slot A; contains the trusted OS. </description>
+            <description> **Required.** Chain B; contains memory configuration table. </description>
         </partition>
-        <partition name="secure-os_b" type="data" oem_sign="true">
+        <partition name="spe-fw_b" type="spe_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 2621440 </size>
+            <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> TOSFILE </filename>
-            <description> **Required.** Slot B; contains the trusted OS. </description>
+            <filename> SPEFILE </filename>
+            <description> **Required.** Chain B; contains BPMP SPE-FW binary. </description>
         </partition>
-        <partition name="eks" type="data" oem_sign="true">
+        <partition name="mb2_b" type="mb2_bootloader" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 65536 </size>
+            <size> 262144 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> EKSFILE </filename>
-            <description> **Optional.** Slot A; contains the encrypted keys. </description>
+            <filename> TEGRABOOT </filename>
+            <description> **Required.** Chain B; contains TegraBoot binary. </description>
         </partition>
-        <partition name="eks_b" type="data" oem_sign="true">
+        <partition name="mts-preboot_b" type="mts_preboot" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> EKSFILE </filename>
-            <description> **Optional.** Slot B; contains the encrypted keys. </description>
+            <filename> MTSPREBOOT </filename>
+            <description> **Required.** Chain B; contains Denver preboot firmware. </description>
         </partition>
-        <partition name="adsp-fw" type="data" oem_sign="true">
+        <partition name="mts-mce_b" type="mts_mce" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 196608 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> adsp-fw.bin </filename>
-            <description> **Required.** Slot A; contains ADSP software. </description>
+            <filename> MTS_MCE </filename>
+            <description> **Required.** Chain B; contains microcode associated with boot, power
+              management, and clocks. </description>
         </partition>
-        <partition name="adsp-fw_b" type="data" oem_sign="true">
+        <partition name="mts-proper_b" type="mts_proper" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 4194304 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> adsp-fw.bin </filename>
-            <description> **Required.** Slot B; contains ADSP software. </description>
+            <filename> MTSPROPER </filename>
+            <description> **Required.** Chain B; contains microcode associated with execution
+              and optimization of ARM code. </description>
         </partition>
-        <partition name="rce-fw" type="data" oem_sign="true">
+        <partition name="sc7_b" type="WB0" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 131072 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> CAMERAFW </filename>
-            <description> **Required.** Slot A; contains `camera-rtcpu-rce` firmware. </description>
+            <filename> WB0BOOT </filename>
+            <description> **Required.** Chain B; contains warm boot firmware. </description>
         </partition>
-        <partition name="rce-fw_b" type="data" oem_sign="true">
+        <partition name="xusb-fw_b" type="xusb_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 196608 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> CAMERAFW </filename>
-            <description> **Required.** Slot B; contains `camera-rtcpu-rce` firmware. </description>
+            <filename> xusb_sil_rel_fw </filename>
+            <description> **Required.** Chain B; contains XUSB firmware file, making XUSB
+              a true USB 3.0 compliant host controller. </description>
         </partition>
-        <partition name="sce-fw" type="data" oem_sign="true">
+        <partition name="cpu-bootloader_b" type="bootloader_stage2" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 4194304 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-<!--            <filename> sce-fw.bin </filename>	-->
-            <description> **Required.** Contains `camera-rtcpu-sce` firmware. </description>
+            <filename> TBCFILE </filename>
+            <description> **Required.** Chain B; contains UEFI, the final boot stage CPU Bootloader
+              binary that loads the binary in the kernel partition.  </description>
         </partition>
-        <partition name="sce-fw_b" type="data" oem_sign="true">
+        <partition name="bootloader-dtb_b" type="bl_dtb" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 458752 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-<!--            <filename> sce-fw.bin </filename>	-->
-            <description> **Required.** Contains `camera-rtcpu-sce` firmware. </description>
+            <filename> DTB_NAME </filename>
+            <description> **Required.** Chain B; contains Bootloader device tree blob
+              (DTB). </description>
         </partition>
-        <partition name="bpmp-fw" type="data" oem_sign="true">
+        <partition name="reserved_for_chain_B_boot" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1572864 </size>
+            <size> 655360 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BPFFILE </filename>
-            <description> **Required.** Slot A; contains BPMP firmware. </description>
+            <description> **Required.** Reserved space for chain B on boot device. </description>
         </partition>
-        <partition name="bpmp-fw_b" type="data" oem_sign="true">
+        <partition name="uefi_variables" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1572864 </size>
+            <start_location> 0x1EF0000 </start_location>
+            <size> 131072 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
+            <allocation_attribute> 0x8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BPFFILE </filename>
-            <description> **Required.** Slot B; contains BPMP firmware. </description>
+            <description> **Required.** Contains UEFI variable store with configuration data.
+              </description>
         </partition>
-        <partition name="bpmp-fw-dtb" type="data" oem_sign="true">
+        <partition name="uefi_ftw" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <size> 196608 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 8 </allocation_attribute>
+            <allocation_attribute> 0x8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BPFDTB_FILE </filename>
-            <description> **Required.** Slot A; contains BPMP firmware device tree blob
-              (DTB). </description>
+            <description> **Required.** Contains UEFI FTW storage.
+              </description>
         </partition>
-        <partition name="bpmp-fw-dtb_b" type="data" oem_sign="true">
+        <partition name="BCT-boot-chain_backup" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 1048576 </size>
+            <start_location> 0x1FA0000 </start_location>
+            <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BPFDTB_FILE </filename>
-            <description> **Required.** Slot B; contains BPMP firmware device tree blob
-              (DTB). </description>
+            <description> **Required.** Contains backup of Boot Configuration Table (BCT)
+              for all boot chains. </description>
         </partition>
-        <partition name="CPUBL-CFG" type="data">
+        <partition name="reserved_partition" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <description> **Optional.** Contains boot device selection priority list. </description>
+            <description> **Required.** Contains backup of Boot Configuration Table (BCT)
+              for booting from chain B. </description>
         </partition>
-        <partition name="CPUBL-CFG_b" type="data">
+        <partition name="secondary_gpt_backup" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x8 </allocation_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <description> **Optional.** Contains boot device selection priority list. </description>
+            <description> **Required.** Contains backup for secondary GPT of the `spi`
+              device. </description>
         </partition>
-        <partition name="VER" type="data">
+        <partition name="VER_b" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
+            <start_location> 0x1FD0000 </start_location>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <partition_attribute> 0 </partition_attribute>
             <allocation_attribute> 8 </allocation_attribute>
@@ -473,16 +454,17 @@
             <filename> VERFILE </filename>
             <description> **Required.** Contains BSP version information. </description>
         </partition>
-        <partition name="VER_b" type="data">
+        <partition name="VER" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 65536 </size>
+            <align_boundary> 65536 </align_boundary>
             <file_system_attribute> 0 </file_system_attribute>
             <partition_attribute> 0 </partition_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
             <filename> VERFILE </filename>
-            <description> **Required.** Contains a redundant copy of BSP version information. </description>
+            <description> **Required.** Contains BSP version information. </description>
         </partition>
         <partition name="secondary_gpt" type="secondary_gpt">
             <allocation_policy> sequential </allocation_policy>
@@ -495,7 +477,9 @@
               device. </description>
         </partition>
     </device>
-    <device type="sdcard" instance="0" sector_size="512" num_sectors="33554432">
+    
+    
+    <device type="sdcard" instance="0" sector_size="512" num_sectors="123731968">
         <partition name="master_boot_record" type="protective_master_boot_record">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
@@ -516,79 +500,139 @@
               partitions defined after this entry are configured in the kernel, and are
               accessible by standard partition tools such as gdisk and parted. </description>
         </partition>
-        <partition name="kernel" type="data" oem_sign="true">
+        <partition name="kernel" id="2" type="kernel">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 67108864 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> LNXFILE </filename>
-            <description> **Required.** Slot A; contains U-Boot, which loads and launches the kernel
+            <description> **Required.** Chain A; contains boot.img (kernel, initrd, etc)
+              which is loaded in when cpu-bootloader failes to launch the kernel
               from the rootfs at `/boot`. </description>
         </partition>
-        <partition name="kernel_b" type="data" oem_sign="true">
+        <partition name="kernel-dtb" type="kernel_dtb">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 67108864 </size>
+            <size> 458752 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> LNXFILE </filename>
-            <description> **Required.** Slot B; contains U-Boot, which loads and launches the kernel
-              from the rootfs at `/boot`. </description>
+            <filename> DTB_NAME </filename>
+            <description> **Required.** Chain A; contains kernel device tree blob. </description>
         </partition>
-        <partition name="kernel-dtb" type="data" oem_sign="true">
+        <partition name="reserved_for_chain_A_user" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 524288 </size>
+            <size> 34123776 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> DTB_FILE </filename>
-            <description> **Required.** Slot A; contains kernel device tree blob. </description>
+            <description> **Required.** Reserved space for chain A on user device. </description>
         </partition>
-        <partition name="kernel-dtb_b" type="data" oem_sign="true">
+        <partition name="secure-os_b" type="tos" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 524288 </size>
+            <!-- <start_location> 0x6100000 </start_location>  aligned to 0x100000 --> 
+            <size> 2621440 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> DTB_FILE </filename>
-            <description> **Required.** Slot B; contains kernel device tree blob. </description>
+            <filename> TOSFILE </filename>
+            <description> **Required.** Chain B; contains the trusted OS. </description>
         </partition>
-        <partition name="RECDTB-NAME" type="data" oem_sign="true">
+        <partition name="eks_b" type="eks" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 524288 </size>
+            <size> 65536 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> RECDTB-FILE </filename>
-            <description> **Required.** Contains recovery DTB image. </description>
+            <filename> EKSFILE </filename>
+            <description> **Required.** Chain B; contains the encrypted keys. </description>
         </partition>
-        <partition name="BOOTCTRLNAME" type="data">
+        <partition name="adsp-fw_b" type="ape_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 262144 </size>
+            <size> 1048576 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BOOTCTRL-FILE </filename>
-            <description> **Required.** Slot A; contains boot control data. </description>
+            <filename> adsp-fw.bin </filename>
+            <description> **Required.** Chain B; contains ADSP software. </description>
         </partition>
-        <partition name="BOOTCTRLNAME_b" type="data">
+        <partition name="rce-fw_b" type="rce_fw" oem_sign="true">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 262144 </size>
+            <size> 1048576 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+            <filename> CAMERAFW </filename>
+            <description> **Required.** Chain B; contains `camera-rtcpu-rce` firmware. </description>
+        </partition>
+        <partition name="sce-fw_b" type="sce_fw" oem_sign="true">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 1048576 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+<!--            <filename> sce-fw.bin </filename>	-->
+            <description> **Required.** Chain B; contains `camera-rtcpu-sce` firmware. </description>
+        </partition>
+        <partition name="bpmp-fw_b" type="bpmp_fw" oem_sign="true">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 1572864 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+            <filename> BPFFILE </filename>
+            <description> **Required.** Chain B; contains BPMP firmware. </description>
+        </partition>
+        <partition name="bpmp-fw-dtb_b" type="bpmp_fw_dtb" oem_sign="true">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 1048576 </size>
             <file_system_attribute> 0 </file_system_attribute>
             <allocation_attribute> 8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
-            <filename> BOOTCTRL-FILE </filename>
-            <description> **Required.** Slot B; contains boot control data. </description>
+            <filename> BPFDTB_FILE </filename>
+            <description> **Required.** Chain B; contains BPMP firmware device tree blob
+              (DTB). </description>
         </partition>
-         <partition name="PADDING" type="data">
+        <partition name="kernel_b" type="kernel">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 67108864 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+            <description> **Required.** Chain B; contains boot.img (kernel, initrd, etc)
+              which is loaded in when cpu-bootloader failes to launch the kernel
+              from the rootfs at `/boot`. </description>
+        </partition>
+        <partition name="kernel-dtb_b" type="kernel_dtb">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 458752 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+            <filename> DTB_NAME </filename>
+            <description> **Required.** Chain B; contains kernel device tree blob. </description>
+        </partition>
+        <partition name="reserved_for_chain_B_user" type="data">
+            <allocation_policy> sequential </allocation_policy>
+            <filesystem_type> basic </filesystem_type>
+            <size> 34078720 </size>
+            <file_system_attribute> 0 </file_system_attribute>
+            <allocation_attribute> 8 </allocation_attribute>
+            <percent_reserved> 0 </percent_reserved>
+            <description> **Required.** Reserved space for chain B on user device. </description>
+        </partition>
+	<partition name="PADDING" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
             <size> 333426688 </size>
@@ -632,11 +676,12 @@
         <partition name="resin-data" type="data">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
-            <size> 212860928 </size>
+            <size> FILESIZE </size>
             <file_system_attribute> 0 </file_system_attribute>
-            <allocation_attribute> 0x808 </allocation_attribute>
+            <allocation_attribute> 0x8 </allocation_attribute>
             <percent_reserved> 0 </percent_reserved>
         </partition>
+
         <partition name="secondary_gpt" type="secondary_gpt">
             <allocation_policy> sequential </allocation_policy>
             <filesystem_type> basic </filesystem_type>
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-flash-dry_35.1.0.bb b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-flash-dry_35.1.0.bb
index 517cd25..c1031a9 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-flash-dry_35.1.0.bb
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-flash-dry_35.1.0.bb
@@ -87,7 +87,7 @@ signfile() {
         --soft_fuses tegra194-mb1-soft-fuses-l4t.cfg  \
         --cfg flash.xml --chip 0x19 --uphy_config tegra194-mb1-uphy-lane-p2888-0000-p2822-0000.cfg \
         --minratchet_config tegra194-mb1-bct-ratchet-p2888-0000-p2822-0000.cfg \
-        --device_config tegra19x-mb1-bct-device-sdmmc.cfg --misc_cold_boot_config tegra194-mb1-bct-misc-l4t.cfg --misc_config tegra194-mb1-bct-misc-flash.cfg --pinmux_config tegra19x-mb1-pinmux-p2888-0000-a04-p2822-0000-b01.cfg --gpioint_config tegra194-mb1-bct-gpioint-p2888-0000-p2822-0000.cfg --pmic_config tegra194-mb1-bct-pmic-p2888-0001-a04-E-0-p2822-0000.cfg --pmc_config tegra19x-mb1-padvoltage-p2888-0000-a00-p2822-0000-a00.cfg --prod_config tegra19x-mb1-prod-p2888-0000-p2822-0000.cfg --scr_config tegra194-mb1-bct-scr-cbb-mini.cfg --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini.cfg --br_cmd_config tegra194-mb1-bct-reset-p2888-0000-p2822-0000.cfg --dev_params tegra194-br-bct-sdmmc.cfg,tegra194-br-bct_b-sdmmc.cfg  --bin "mb2_bootloader nvtboot_recovery_t194.bin; mts_preboot preboot_c10_prod_cr.bin; mts_mce mce_c10_prod_cr.bin; mts_proper mts_c10_prod_cr.bin; bpmp_fw bpmp-2_t194.bin; bpmp_fw_dtb tegra194-a02-bpmp-p2888-a04_lz4.dtb; spe_fw spe_t194.bin; tos tos-optee_t194.img; eks eks.img; bootloader_dtb tegra194-p2888-0001-p2822-0000.dtb"   --secondary_gpt_backup  --bct_backup  --boot_chain A 
+        --device_config tegra19x-mb1-bct-device-sdmmc.cfg --misc_cold_boot_config tegra194-mb1-bct-misc-l4t.cfg --misc_config tegra194-mb1-bct-misc-flash.cfg --pinmux_config tegra19x-mb1-pinmux-p2888-0000-a04-p2822-0000-b01.cfg --gpioint_config tegra194-mb1-bct-gpioint-p2888-0000-p2822-0000.cfg --pmic_config tegra194-mb1-bct-pmic-p2888-0001-a04-E-0-p2822-0000.cfg --pmc_config tegra19x-mb1-padvoltage-p2888-0000-a00-p2822-0000-a00.cfg --prod_config tegra19x-mb1-prod-p2888-0000-p2822-0000.cfg --scr_config tegra194-mb1-bct-scr-cbb-mini.cfg --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini.cfg --br_cmd_config tegra194-mb1-bct-reset-p2888-0000-p2822-0000.cfg --dev_params tegra194-br-bct-sdmmc.cfg,tegra194-br-bct_b-sdmmc.cfg  --bin "mb2_bootloader nvtboot_recovery_t194.bin; mts_preboot preboot_c10_prod_cr.bin; mts_mce mce_c10_prod_cr.bin; mts_proper mts_c10_prod_cr.bin; bpmp_fw bpmp-2_t194.bin; bpmp_fw_dtb tegra194-a02-bpmp-p2888-a04_lz4.dtb; spe_fw spe_t194.bin; tos tos-optee_t194.img; eks eks.img; bootloader_dtb ${DTBFILE}"   --secondary_gpt_backup  --bct_backup  --boot_chain A 
 
 }
 
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-flash-dry_35.1.0.bb b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-flash-dry_35.1.0.bb
index e527553..195ef9f 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-flash-dry_35.1.0.bb
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-flash-dry_35.1.0.bb
@@ -9,12 +9,11 @@ DEPENDS = " \
     coreutils-native \
     virtual/bootloader \
     virtual/kernel \
-    tegra-binaries \
-    tegra-bootfiles \
-    tegra194-flashtools-native \
-    dtc-native \
-    virtual/bootlogo \
-    "
+    tegra-flashtools-native \
+    dosfstools-native \
+    python3-pyyaml-native \
+    mtools-native \
+"
 
 inherit deploy python3native perlnative
 
@@ -45,13 +44,11 @@ IMAGE_TEGRAFLASH_KERNEL ?= "${DEPLOY_DIR_IMAGE}/${LNXFILE}"
 BINARY_INSTALL_PATH = "/opt/tegra-binaries"
 
 OS_KERNEL_CMDLINE = "${@bb.utils.contains('DISTRO_FEATURES','osdev-image','console=ttyTHS0,115200n8 console=tty1 debug loglevel=7','console=null quiet splash vt.global_cursor_default=0 consoleblank=0',d)}"
-ROOTA_ARGS="root=LABEL=resin-rootA ro rootwait rootfstype=ext4 ${KERNEL_ARGS} ${OS_KERNEL_CMDLINE}"
-ROOTB_ARGS="root=LABEL=resin-rootB ro rootwait rootfstype=ext4 ${KERNEL_ARGS} ${OS_KERNEL_CMDLINE}"
 
 BOOTFILES = "\
     adsp-fw.bin \
-    bpmp_t194.bin \
-    camera-rtcpu-rce.img \
+    bpmp-2_t194.bin \
+    camera-rtcpu-t194-rce.img \
     eks.img \
     mb1_t194_prod.bin \
     nvtboot_applet_t194.bin \
@@ -62,8 +59,6 @@ BOOTFILES = "\
     nvtboot_cpu_t194.bin \
     nvtboot_recovery_t194.bin \
     nvtboot_recovery_cpu_t194.bin \
-    preboot_d15_prod_cr.bin \
-    slot_metadata.bin \
     spe_t194.bin \
     warmboot_t194_prod.bin \
     xusb_sil_rel_fw \
@@ -73,171 +68,89 @@ signfile() {
     local destdir="${WORKDIR}/tegraflash"
     local lnxfile="${LNXFILE}"
     local f
-    PATH="${STAGING_BINDIR_NATIVE}/tegra186-flash:${PATH}"
-    export cbootfilename=cboot_t194.bin
-
+    PATH="${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}:${PATH}"
     export BOARDID=${TEGRA_BOARDID}
     export FAB=${TEGRA_FAB}
     export localbootfile=boot.img
 
-    cp ${STAGING_DATADIR}/tegraflash/flashvars .
-    . ./flashvars
-
-    export bins=" mb2_bootloader nvtboot_recovery_t194.bin; \
-        mts_preboot preboot_c10_prod_cr.bin; \
-        mts_mce mce_c10_prod_cr.bin; \
-        mts_proper mts_c10_prod_cr.bin; \
-        bpmp_fw bpmp_t194.bin; \
-        bpmp_fw_dtb tegra194-a02-bpmp-p3668-a00.dtb; \
-        spe_fw spe_t194.bin; \
-        tlk tos-trusty_t194.img; \
-        eks eks.img; \
-        bootloader_dtb ${DTBFILE}"
-
-    cat flash.xml.in | sed \
-        -e"s,LNXFILE,${localbootfile}," -e"s,LNXSIZE,${LNXSIZE}," \
-        -e"s,TEGRABOOT,nvtboot_t194.bin," \
-        -e"s,MTSPREBOOT,preboot_c10_prod_cr.bin," \
-        -e"s,MTS_MCE,mce_c10_prod_cr.bin," \
-        -e"s,MTSPROPER,mts_c10_prod_cr.bin," \
-        -e"s,MB1FILE,mb1_t194_prod.bin," \
-        -e"s,BPFFILE,bpmp_t194.bin," \
-        -e"s,BPFDTB_FILE,tegra194-a02-bpmp-p3668-a00.dtb," \
-        -e"s,TBCFILE,$cbootfilename," \
-        -e"s,TBCDTB-FILE,${DTBFILE}," \
-        -e"s,CAMERAFW,camera-rtcpu-rce.img," \
-        -e"s,SPEFILE,spe_t194.bin," \
-	-e"s,VERFILE,bsp_version," \
-        -e"s,WB0BOOT,warmboot_t194_prod.bin," \
-        -e"s,TOSFILE,tos-trusty_t194.img," \
-        -e"s,EKSFILE,eks.img," \
-        -e"s, DTB_FILE, ${DTBFILE}," \
-        -e"s,RECNAME,recovery," -e"s,RECSIZE,66060288," -e"s,RECDTB-NAME,recovery-dtb," -e"s,BOOTCTRLNAME,kernel-bootctrl," \
-        -e"/RECFILE/d" -e"/RECDTB-FILE/d" -e"/BOOTCTRL-FILE/d" \
-        > $destdir/flash.xml
-
-
-     tegraflashpy=$(which tegraflash.py)
-
-     python3 $tegraflashpy --bl nvtboot_recovery_cpu_t194.bin \
-     --sdram_config tegra194-mb1-bct-memcfg-p3668-0001-a00.cfg,tegra194-memcfg-sw-override.cfg  \
-     --odmdata 0xB8190000 \
-     --applet mb1_t194_prod.bin \
-     --cmd "sign$1" \
-     --soft_fuses tegra194-mb1-soft-fuses-l4t.cfg  \
-     --cfg flash.xml \
-     --chip 0x19 \
-     --device_config tegra19x-mb1-bct-device-qspi-p3668.cfg \
-     --misc_cold_boot_config tegra194-mb1-bct-misc-l4t.cfg \
-     --misc_config tegra194-mb1-bct-misc-flash.cfg \
-     --pinmux_config tegra19x-mb1-pinmux-p3668-a01.cfg \
-     --gpioint_config tegra194-mb1-bct-gpioint-p3668-0001-a00.cfg \
-     --pmic_config tegra194-mb1-bct-pmic-p3668-0001-a00.cfg \
-     --pmc_config tegra19x-mb1-padvoltage-p3668-a01.cfg \
-     --prod_config tegra19x-mb1-prod-p3668-0001-a00.cfg \
-     --scr_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg \
-     --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg \
-     --br_cmd_config tegra194-mb1-bct-reset-p3668-0001-a00.cfg \
-     --dev_params tegra194-br-bct-qspi.cfg \
-     --bin "${bins}"
+    export CHIPREV=${TEGRA_CHIPREV}
+    export sdramcfg=${MACHINE}.cfg,${MACHINE}-override.cfg
+
+    ./tegraflash.py --bl nvtboot_recovery_cpu_t194.bin --sdram_config tegra194-mb1-bct-memcfg-p3668-0001-a00.cfg,tegra194-memcfg-sw-override.cfg  --odmdata 0xB8190000  --overlay_dtb L4TConfiguration.dtbo,tegra194-p3668-p3509-overlay.dtbo,L4TRootfsInfo.dtbo  --bldtb tegra194-p3668-0000-p3509-0000.dtb --applet mb1_t194_prod.bin --cmd "sign" --soft_fuses tegra194-mb1-soft-fuses-l4t.cfg  --cfg flash.xml --chip 0x19 --minratchet_config tegra194-mb1-bct-ratchet-p3668.cfg --device_config tegra19x-mb1-bct-device-qspi-p3668.cfg --misc_cold_boot_config tegra194-mb1-bct-misc-sd-l4t.cfg --misc_config tegra194-mb1-bct-misc-flash.cfg --pinmux_config tegra19x-mb1-pinmux-p3668-a01.cfg --gpioint_config tegra194-mb1-bct-gpioint-p3668-0001-a00.cfg --pmic_config tegra194-mb1-bct-pmic-p3668-0001-a00.cfg --pmc_config tegra19x-mb1-padvoltage-p3668-a01.cfg --prod_config tegra19x-mb1-prod-p3668-0001-a00.cfg --scr_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg --br_cmd_config tegra194-mb1-bct-reset-p3668-0001-a00.cfg --dev_params tegra194-br-bct-qspi-l4t.cfg,tegra194-br-bct_b-qspi-l4t.cfg  --bin "mb2_bootloader nvtboot_recovery_t194.bin; mts_preboot preboot_c10_prod_cr.bin; mts_mce mce_c10_prod_cr.bin; mts_proper mts_c10_prod_cr.bin; bpmp_fw bpmp-2_t194.bin; bpmp_fw_dtb tegra194-a02-bpmp-p3668-a00_lz4.dtb; spe_fw spe_t194.bin; tos tos-optee_t194.img; eks eks.img; bootloader_dtb tegra194-p3668-0000-p3509-0000.dtb"   --secondary_gpt_backup  --bct_backup  --boot_chain A
 }
 
 do_configure() {
-    local destdir="${WORKDIR}/tegraflash"
+   local destdir="${WORKDIR}/tegraflash"
     local lnxfile="${LNXFILE}"
-    local f
-    PATH="${STAGING_BINDIR_NATIVE}/tegra186-flash:${PATH}"
+  local f
+    PATH="${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}:${PATH}"
     rm -rf "${WORKDIR}/tegraflash"
     mkdir -p "${WORKDIR}/tegraflash"
     oldwd=`pwd`
     cd "${WORKDIR}/tegraflash"
-    ln -sf "${STAGING_DATADIR}/tegraflash/bsp_version" .
-    ln -s "${STAGING_DATADIR}/tegraflash/${MACHINE}.cfg" .
-    ln -s "${STAGING_DATADIR}/tegraflash/${MACHINE}-override.cfg" .
-    ln -s "${DEPLOY_DIR_IMAGE}/cboot-${MACHINE}.bin" ./cboot_t194.bin
-    ln -s "${DEPLOY_DIR_IMAGE}/tos-${MACHINE}.img" ./tos-trusty_t194.img
-
-    cp "${DEPLOY_DIR_IMAGE}/bootlogo-${MACHINE}.blob" ./bmp.blob
-    mkdir -p ${DEPLOY_DIR_IMAGE}/bootfiles
-    cp ./cboot_t194.bin ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp ./bmp.blob ${DEPLOY_DIR_IMAGE}/bootfiles/
-
+    cp "${STAGING_DATADIR}/tegraflash/bsp_version" .
+    cp "${STAGING_DATADIR}/tegraflash/${EMMC_BCT}" .
+    cp "${STAGING_DATADIR}/tegraflash/${EMMC_BCT_OVERRIDE}" .
+    cp "${IMAGE_TEGRAFLASH_KERNEL}" ./${LNXFILE}
+    if [ -n "${DATAFILE}" -a -n "${IMAGE_TEGRAFLASH_DATA}" ]; then
+        cp "${IMAGE_TEGRAFLASH_DATA}" ./${DATAFILE}
+        DATAARGS="--datafile ${DATAFILE}"
+    fi
+    cp "${DEPLOY_DIR_IMAGE}/uefi_jetson.bin" ./uefi_jetson.bin
+    cp "${DEPLOY_DIR_IMAGE}/tos-${MACHINE}.img" ./${TOSIMGFILENAME}
     for f in ${BOOTFILES}; do
-        ln -s "${STAGING_DATADIR}/tegraflash/$f" .
-        cp "${STAGING_DATADIR}/tegraflash/$f" ${DEPLOY_DIR_IMAGE}/bootfiles/
+        cp "${STAGING_DATADIR}/tegraflash/$f" .
     done
-
+    cp mb1_t194_prod.bin mb1_b_t194_prod.bin
+    rm -rf ./rollback
+    mkdir -p ./rollback
+    #cp -R ${STAGING_DATADIR}/nv_tegra/rollback/t${@d.getVar('NVIDIA_CHIP')[2:]}x ./rollback/
     cp ${STAGING_DATADIR}/tegraflash/flashvars .
-    . ./flashvars
-
+    sed -i -e "s/@OVERLAY_DTB_FILE@/${OVERLAY_DTB_FILE}/" ./flashvars
     for f in ${STAGING_DATADIR}/tegraflash/tegra19[4x]-*.cfg; do
-        ln -s $f .
-        cp $f ${DEPLOY_DIR_IMAGE}/bootfiles/
+        cp $f .
     done
-
     for f in ${STAGING_DATADIR}/tegraflash/tegra194-*-bpmp-*.dtb; do
         cp $f .
     done
-
-    if [ -n "${NVIDIA_BOARD_CFG}" ]; then
-        ln -s "${STAGING_DATADIR}/tegraflash/board_config_${MACHINE}.xml" .
-        boardcfg=board_config_${MACHINE}.xml
-    else
-        boardcfg=
+    cp -r ${DEPLOY_DIR_IMAGE}/*.dtbo .
+    cp -r ${DEPLOY_DIR_IMAGE}/*.dtb .
+    if [ "${TEGRA_SIGNING_EXCLUDE_TOOLS}" != "1" ]; then
+        cp -R ${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}/* .
     fi
-    export boardcfg
-
-    sed -i -e "s/\[DTBNAME\]/${DTBNAME}/g" ${WORKDIR}/partition_specification194_nxde.txt
-
-    ln -s ${STAGING_BINDIR_NATIVE}/tegra186-flash .
-
-    cp "${DEPLOY_DIR_IMAGE}/${DTBFILE}" ./${DTBFILE}
-
-    # This one is used to ensure carrier boards have
-    # the same bldtb, so that the generated boot0.img
-    # has valid signatures.
-    cp "${DEPLOY_DIR_IMAGE}/tegra194-p3668-all-p3509-0000.dtb" .
-
-    # These reside on the eMMC, can differ from bldtb
-    cp ./${DTBFILE} ./${DTBNAME}-rootA.dtb
-    cp ./${DTBFILE} ./${DTBNAME}-rootB.dtb
-
-    # Add rootA/rootB and save as separate dtbs to be used when
-    # switching partitions
-    bootargs="`fdtget ./${DTBFILE} /chosen bootargs 2>/dev/null`"
-    fdtput -t s ./${DTBNAME}-rootA.dtb /chosen bootargs "$bootargs ${ROOTA_ARGS} "
-    fdtput -t s ./${DTBNAME}-rootB.dtb /chosen bootargs "$bootargs ${ROOTB_ARGS} "
-
-    # Need to switch back to default values from flashing, otherwise bootloader dtb offset inside boot0.img will
-    # change and will generate signature failure in MB2.
-    bldtbchosenargs="console=ttyTCU0,115200"
-    bldtbdtsname="/dvs/git/dirty/git-master_linux/kernel/kernel-4.9/arch/arm64/boot/dts/../../../../../../hardware/nvidia/platform/t19x/jakku/kernel-dts/tegra194-p3668-all-p3509-0000.dts"
-
-    # Do not overide this hardcoded dtb for carrier boards, this is used for bldtb in boot0.img
-    fdtput -t s ./tegra194-p3668-all-p3509-0000.dtb / "nvidia,dtsfilename" $bldtbdtsname
-    fdtput -t s ./tegra194-p3668-all-p3509-0000.dtb /chosen bootargs $bldtbchosenargs
-
-    # Make bootable image from kernel and sign it
-    cp ${DEPLOY_DIR_IMAGE}/${LNXFILE} ${LNXFILE}
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/mkbootimg ./
-
-    # mkbootimg really needs initrd, even if empty
-    touch initrd
-    ./mkbootimg --kernel ${LNXFILE} --ramdisk initrd --board mmcblk0p1 --output boot.img
 
     # prepare flash.xml.in to be used in signing
-    cp ${WORKDIR}/${FLASHXML} flash.xml.in
+    cp ${WORKDIR}/resinOS-flash194.xml flash.xml.in
+    sed -i "s, DTB_NAME, ${DTBFILE},g" flash.xml.in
 
-    # prep env for tegraflash
-    rm -f ./slot_metadata.bin
-    cp ${STAGING_DATADIR}/tegraflash/slot_metadata.bin ./
-    mkdir ./rollback
+    sed -i -e "s/\[DTB_NAME\]/$(echo ${DTBFILE} | cut -d '.' -f 1)/g" ${WORKDIR}/partition_specification194_nxde.txt
 
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/rollback_parser.py ./rollback/
-    ln -snf ${STAGING_DATADIR}/nv_tegra/rollback/t${@d.getVar('NVIDIA_CHIP')[2:]}x ./rollback/
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/BUP_generator.py ./
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/${SOC_FAMILY}-flash-helper.sh ./
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/tegraflash.py ./
+   sed -e"s,MB1FILE,mb1_b_t194_prod.bin,2" flash.xml.in | \
+        sed \
+        -e"s,LNXFILE_b,$lnxfile," \
+        -e"s,LNXFILE,$lnxfile," -e"s,LNXSIZE,${LNXSIZE}," \
+        -e"s,TEGRABOOT,nvtboot_t194.bin," \
+        -e"s,MTSPREBOOT,preboot_c10_prod_cr.bin," \
+        -e"s,MTS_MCE,mce_c10_prod_cr.bin," \
+        -e"s,MTSPROPER,mts_c10_prod_cr.bin," \
+        -e"s,MB1FILE,mb1_t194_prod.bin," \
+        -e"s,BPFFILE,bpmp-2_t194.bin," \
+        -e"s,TBCFILE,uefi_jetson.bin," \
+        -e"s,CAMERAFW,camera-rtcpu-t194-rce.img," \
+        -e"s,BPFDTB_FILE,tegra194-a02-bpmp-p2888-a04_lz4.dtb," \
+        -e"s,DRAMECCTYPE,dram_ecc," -e"s,DRAMECCFILE,dram-ecc-t194.bin," -e"s,DRAMECCNAME,dram-ecc-fw," \
+        -e"s,SPEFILE,spe_t194.bin," \
+        -e"s,WB0BOOT,warmboot_t194_prod.bin," \
+        -e"s,TOSFILE,${TOSIMGFILENAME}," \
+        -e"s,EKSFILE,eks.img," \
+        -e"s,RECNAME,recovery," -e"s,RECSIZE,66060288," -e"s,RECDTB-NAME,recovery-dtb," -e"s,BOOTCTRLNAME,kernel-bootctrl," \
+        -e"/RECFILE/d" -e"/RECDTB-FILE/d" -e"/BOOTCTRL-FILE/d" \
+        -e"s,APPSIZE,${ROOTFSPART_SIZE}," \
+        -e"s,RECROOTFSSIZE,${RECROOTFSSIZE}," \
+        -e"s,APPUUID_b,," -e"s,APPUUID,," \
+        -e"s,ESP_FILE,esp.img," -e"/VARSTORE_FILE/d" \
+        > flash.xml
+    # prep env for tegraflash
 
     # bup is based on the rootfs, which is not built at this point
     # not using it for the moment
@@ -245,148 +158,27 @@ do_configure() {
     rm -rf signed
 
     # Sign all tegra bins
-    signfile
-
-    signfile " ${DTBNAME}-rootA.dtb"
-    signfile " ${DTBNAME}-rootB.dtb"
-
-    # Used in boot0.img
-    signfile " tegra194-p3668-all-p3509-0000.dtb"
+    signfile ""
 
     # Needed to embedd plain initramfs kernel and dtb to main image
-    cp $localbootfile ${DEPLOY_DIR_IMAGE}/bootfiles/Image
-
-    cp -r ${DTBNAME}-root*.dtb* ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp ${WORKDIR}/${FLASHXML} ${DEPLOY_DIR_IMAGE}/bootfiles/flash.xml
+    cp ${LNXFILE} ${DEPLOY_DIR_IMAGE}/bootfiles/Image
+    cp ${WORKDIR}/resinOS-flash194.xml ${DEPLOY_DIR_IMAGE}/bootfiles/flash.xml
     cp -r signed/* ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt ${DEPLOY_DIR_IMAGE}/bootfiles/
 
     dd if=/dev/zero count=1 bs=33554432 | tr "\000" "\377" > boot0.img
-    dd if=/dev/zero bs=2887 count=1 of=boot0.img conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=4096 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=32768 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=65536 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=98304 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_t194_prod_sigheader.bin.encrypt of=boot0.img seek=131072 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_t194_prod_sigheader.bin.encrypt of=boot0.img seek=393216 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_cold_boot_bct_MB1_sigheader.bct.encrypt of=boot0.img seek=655360 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_cold_boot_bct_MB1_sigheader.bct.encrypt of=boot0.img seek=720896 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mem_coldboot_sigheader.bct.encrypt of=boot0.img seek=786432 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mem_coldboot_sigheader.bct.encrypt of=boot0.img seek=1048576 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/spe_t194_sigheader.bin.encrypt of=boot0.img seek=1310720 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/spe_t194_sigheader.bin.encrypt of=boot0.img seek=1572864 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/nvtboot_t194_sigheader.bin.encrypt of=boot0.img seek=1835008 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/nvtboot_t194_sigheader.bin.encrypt of=boot0.img seek=2097152 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/preboot_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2359296 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/preboot_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2424832 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mce_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2490368 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mce_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2686976 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mts_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2883584 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mts_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=7077888 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/warmboot_t194_prod_sigheader.bin.encrypt of=boot0.img seek=11272192 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/warmboot_t194_prod_sigheader.bin.encrypt of=boot0.img seek=11403264 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/slot_metadata.bin of=boot0.img seek=11534336 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/slot_metadata.bin of=boot0.img seek=11599872 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/xusb_sil_rel_fw of=boot0.img seek=11665408 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/xusb_sil_rel_fw of=boot0.img seek=11862016 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cboot_t194_sigheader.bin.encrypt of=boot0.img seek=12058624 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cboot_t194_sigheader.bin.encrypt of=boot0.img seek=13500416 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt of=boot0.img seek=14942208 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt of=boot0.img seek=15400960 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bmp.blob of=boot0.img seek=15859712 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bmp.blob of=boot0.img seek=16056320 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tos-trusty_t194_sigheader.img.encrypt of=boot0.img seek=16252928 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tos-trusty_t194_sigheader.img.encrypt of=boot0.img seek=18874368 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/eks_sigheader.img.encrypt of=boot0.img seek=21495808 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/eks_sigheader.img.encrypt of=boot0.img seek=21561344 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/adsp-fw_sigheader.bin.encrypt of=boot0.img seek=21626880 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/adsp-fw_sigheader.bin.encrypt of=boot0.img seek=22675456 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/camera-rtcpu-rce_sigheader.img.encrypt of=boot0.img seek=23724032 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/camera-rtcpu-rce_sigheader.img.encrypt of=boot0.img seek=24772608 bs=1 conv=notrunc
-
-    # sce-fw empty both a+b
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bpmp_t194_sigheader.bin.encrypt of=boot0.img seek=27918336 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bpmp_t194_sigheader.bin.encrypt of=boot0.img seek=29491200 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-a02-bpmp-p3668-a00_sigheader.dtb.encrypt of=boot0.img seek=31064064 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-a02-bpmp-p3668-a00_sigheader.dtb.encrypt of=boot0.img seek=32112640 bs=1 conv=notrunc
-
-    # boot option file is empty on a clean flashed board, will leave it here
-    # for offset refference
-    #dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cbo.dtb seek=33161216 bs=1 conv=notrunc
-    #dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cbo.dtb seek=33226752 bs=1 conv=notrunc
-
-    # For 32.5.1 /opt/tegra-binaries/boot0.img MD5 should have the same MD5
-    # even if building the image for compatible carrier boards. If it isn't identical,
-    # then the device won't boot after HUP.
-    cp ${WORKDIR}/${BOOT_BINDIFF} .
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14942224 bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14945200 skip=32  bs=1 count=80 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15400976 skip=112  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15400992 skip=144  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15403952 skip=176  bs=1 count=80 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=16252944 skip=256  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=16255920 skip=288  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=18874384 skip=292  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=18877360 skip=356  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21495824 skip=360  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21498800 skip=424  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21561360 skip=428  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21564336 skip=492  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=27918352 skip=496  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=27921328 skip=560  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=29491216 skip=564  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=29494192 skip=628  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31064080 skip=632  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067056 skip=696  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=32112656 skip=700  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=32115632 skip=764  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33292288 skip=768  bs=1 count=256 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33357824 skip=1024 bs=1 count=256 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33537536 skip=1280 bs=1 count=16896 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14946816 skip=18176 bs=1 count=48 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15101952 skip=18224 bs=1 count=128 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15405568 skip=18352 bs=1 count=48 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15560704 skip=18400 bs=1 count=128 conv=notrunc
-
-    # Added starting with 32.6.1
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067056 skip=18528 bs=1 count=16 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067104 skip=18544 bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31068160 skip=18576 bs=1 count=64 conv=notrunc
+    #TODO: Signed binary
+
+    cp boot0.img ${DEPLOY_DIR_IMAGE}/bootfiles/
+
 
 }
 
 do_install() {
     install -d ${D}/${BINARY_INSTALL_PATH}
     cp -r ${S}/tegraflash/signed/* ${D}/${BINARY_INSTALL_PATH}
-
-    cp ${S}/tegraflash/${DTBNAME}-rootA.dtb ${D}/${BINARY_INSTALL_PATH}/
+    rm ${D}/${BINARY_INSTALL_PATH}/boot*im* || true
     cp ${WORKDIR}/partition_specification194_nxde.txt ${D}/${BINARY_INSTALL_PATH}/
-    cp -r ${S}/tegraflash/${DTBNAME}-root*sigheader.dtb.encrypt ${D}/${BINARY_INSTALL_PATH}
-    cp ${S}/tegraflash/boot0.img ${D}/${BINARY_INSTALL_PATH}
     # When generating image, this will be default dtb containing cmdline with root set to resin-rootA
-    cp ${S}/tegraflash/${DTBNAME}-rootA_sigheader.dtb.encrypt ${DEPLOY_DIR_IMAGE}/bootfiles/${DTBNAME}_sigheader.dtb.encrypt
 }
 
 do_deploy() {
diff --git a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-sdcard-flash_35.1.0.bb b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-sdcard-flash_35.1.0.bb
index 6490bea..85e3f94 100644
--- a/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-sdcard-flash_35.1.0.bb
+++ b/layers/meta-balena-jetson/recipes-bsp/tegra-binaries/tegra194-nxde-sdcard-flash_35.1.0.bb
@@ -1,40 +1,41 @@
-SUMMARY = "Create flash artifacts without flashing the Jetson NX Devkit SD-CARD"
+SUMMARY = "Create flash artifacts without flashing"
 
 LICENSE = "Apache-2.0"
 LIC_FILES_CHKSUM = "file://${BALENA_COREBASE}/COPYING.Apache-2.0;md5=89aea4e17d99a7cacdbeed46a0096b10"
 
 IMAGE_ROOTFS_ALIGNMENT ?= "4"
 
+BOOT_BINDIFF="boot0_t194_agx_sd.bindiff"
+
 DEPENDS = " \
     coreutils-native \
     virtual/bootloader \
     virtual/kernel \
     tegra-binaries \
     tegra-bootfiles \
-    tegra194-flashtools-native \
-    dtc-native \
-    virtual/bootlogo \
+    tegra-flashtools-native \
+    dosfstools-native \
+    python3-pyyaml-native \
+    mtools-native \
     "
 
-inherit deploy python3native perlnative
-
-BOOT_BINDIFF="boot0_t194_nx_sd.bindiff"
+inherit deploy python3native perlnative l4t_bsp
 
 SRC_URI = " \
     file://resinOS-flash194_nxde_sdcard.xml \
     file://partition_specification194_nxde_sdcard.txt \
-    file://boot0_t194_nx_sd.bindiff \
+    file://${BOOT_BINDIFF} \
 "
 
-FLASHXML = "resinOS-flash194_nxde_sdcard.xml"
+LNXSIZE ?= "67108864"
 DTBNAME = "tegra194-p3668-all-p3509-0000"
-DTBNAME:jetson-xavier-nx-devkit-seeed-2mic-hat = "tegra194-p3668-all-p3509-0000-seeed-2mic-hat"
 KERNEL_DEVICETREE = "${DEPLOY_DIR_IMAGE}/${DTBNAME}.dtb"
 DTBFILE ?= "${@os.path.basename(d.getVar('KERNEL_DEVICETREE', True).split()[0])}"
-LNXSIZE ?= "67108864"
 
 IMAGE_TEGRAFLASH_FS_TYPE ??= "ext4"
 IMAGE_TEGRAFLASH_ROOTFS ?= "${IMGDEPLOYDIR}/${IMAGE_LINK_NAME}.${IMAGE_TEGRAFLASH_FS_TYPE}"
+FLASHTOOLS_DIR = "tegra-flash"
+TOSIMGFILENAME = "tos-optee_t194.img"
 
 LDK_DIR = "${TMPDIR}/work-shared/L4T-${SOC_FAMILY}-${PV}-${PR}/Linux_for_Tegra"
 B = "${WORKDIR}/build"
@@ -43,14 +44,24 @@ LNXFILE="${KERNEL_IMAGETYPE}${KERNEL_INITRAMFS}-${MACHINE}.bin"
 IMAGE_TEGRAFLASH_KERNEL ?= "${DEPLOY_DIR_IMAGE}/${LNXFILE}"
 BINARY_INSTALL_PATH = "/opt/tegra-binaries"
 
-OS_KERNEL_CMDLINE = "${@bb.utils.contains('DISTRO_FEATURES','osdev-image','console=ttyTHS0,115200n8 console=tty1 debug loglevel=7','console=null quiet splash vt.global_cursor_default=0 consoleblank=0',d)}"
-ROOTA_ARGS="root=LABEL=resin-rootA ro rootwait rootfstype=ext4 ${KERNEL_ARGS} ${OS_KERNEL_CMDLINE}"
-ROOTB_ARGS="root=LABEL=resin-rootB ro rootwait rootfstype=ext4 ${KERNEL_ARGS} ${OS_KERNEL_CMDLINE}"
+DTB_OVERLAYS = "\
+    L4TConfiguration.dtbo \
+    L4TRootfsInfo.dtbo \
+    tegra194-p2822-camera-dual-imx274-overlay.dtbo \
+    tegra194-p2822-camera-e3331-overlay.dtbo \
+    tegra194-p2822-camera-e3333-overlay.dtbo \
+    tegra194-p2822-camera-imx185-overlay.dtbo \
+    tegra194-p2822-camera-imx390-overlay.dtbo \
+    tegra194-p2888-0005-overlay.dtbo \
+    tegra194-p2888-0001-p2822-0000-overlay.dtbo \
+"
+
+OS_KERNEL_CMDLINE = "${@bb.utils.contains('DISTRO_FEATURES','osdev-image','console=ttyTHS0,115200n8 console=tty1 ','console=null quiet splash vt.global_cursor_default=0 consoleblank=0',d)} l4tver=${L4T_VERSION}"
 
-BOOTFILES = "\
+BOOTFILES=" \
     adsp-fw.bin \
-    bpmp_t194.bin \
-    camera-rtcpu-rce.img \
+    bpmp-2_t194.bin \
+    camera-rtcpu-t194-rce.img \
     eks.img \
     mb1_t194_prod.bin \
     nvtboot_applet_t194.bin \
@@ -61,8 +72,6 @@ BOOTFILES = "\
     nvtboot_cpu_t194.bin \
     nvtboot_recovery_t194.bin \
     nvtboot_recovery_cpu_t194.bin \
-    preboot_d15_prod_cr.bin \
-    slot_metadata.bin \
     spe_t194.bin \
     warmboot_t194_prod.bin \
     xusb_sil_rel_fw \
@@ -72,322 +81,139 @@ signfile() {
     local destdir="${WORKDIR}/tegraflash"
     local lnxfile="${LNXFILE}"
     local f
-    PATH="${STAGING_BINDIR_NATIVE}/tegra186-flash:${PATH}"
-    export cbootfilename=cboot_t194.bin
-
+    PATH="${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}:${PATH}"
     export BOARDID=${TEGRA_BOARDID}
     export FAB=${TEGRA_FAB}
     export localbootfile=boot.img
 
-    cp ${STAGING_DATADIR}/tegraflash/flashvars .
-    . ./flashvars
-
-    export bins=" mb2_bootloader nvtboot_recovery_t194.bin; \
-        mts_preboot preboot_c10_prod_cr.bin; \
-        mts_mce mce_c10_prod_cr.bin; \
-        mts_proper mts_c10_prod_cr.bin; \
-        bpmp_fw bpmp_t194.bin; \
-        bpmp_fw_dtb tegra194-a02-bpmp-p3668-a00.dtb; \
-        spe_fw spe_t194.bin; \
-        tlk tos-trusty_t194.img; \
-        eks eks.img; \
-        bootloader_dtb ${DTBFILE}"
-
-    cat flash.xml.in | sed \
-        -e"s,LNXFILE,${localbootfile}," -e"s,LNXSIZE,${LNXSIZE}," \
-        -e"s,TEGRABOOT,nvtboot_t194.bin," \
-        -e"s,MTSPREBOOT,preboot_c10_prod_cr.bin," \
-        -e"s,MTS_MCE,mce_c10_prod_cr.bin," \
-        -e"s,MTSPROPER,mts_c10_prod_cr.bin," \
-        -e"s,MB1FILE,mb1_t194_prod.bin," \
-        -e"s,BPFFILE,bpmp_t194.bin," \
-        -e"s,BPFDTB_FILE,tegra194-a02-bpmp-p3668-a00.dtb," \
-        -e"s,TBCFILE,$cbootfilename," \
-        -e"s,TBCDTB-FILE,${DTBFILE}," \
-        -e"s,CAMERAFW,camera-rtcpu-rce.img," \
-        -e"s,SPEFILE,spe_t194.bin," \
-        -e"s,VERFILE,bsp_version," \
-        -e"s,WB0BOOT,warmboot_t194_prod.bin," \
-        -e"s,TOSFILE,tos-trusty_t194.img," \
-        -e"s,EKSFILE,eks.img," \
-        -e"s, DTB_FILE, ${DTBFILE}," \
-        -e"s,RECNAME,recovery," \
-        -e"s,RECSIZE,66060288," \
-        -e"s,RECDTB-NAME,recovery-dtb," \
-        -e"s,BOOTCTRLNAME,kernel-bootctrl," \
-        -e"/RECFILE/d" -e"/RECDTB-FILE/d" -e"/BOOTCTRL-FILE/d" \
-        > $destdir/flash.xml
-
-     tegraflashpy=$(which tegraflash.py)
+    export CHIPREV=${TEGRA_CHIPREV}
+    export sdramcfg=${MACHINE}.cfg,${MACHINE}-override.cfg
 
-     python3 $tegraflashpy --bl nvtboot_recovery_cpu_t194.bin \
-        --sdram_config tegra194-mb1-bct-memcfg-p3668-0001-a00.cfg,tegra194-memcfg-sw-override.cfg  \
-        --odmdata 0xB8190000 \
-        --applet mb1_t194_prod.bin \
-        --cmd "sign$1" \
+    ./tegraflash.py --bl nvtboot_recovery_cpu_t194.bin \
+        --sdram_config tegra194-mb1-bct-memcfg-p2888.cfg,tegra194-memcfg-sw-override.cfg  \
+        --odmdata 0x9190000  \
+        --overlay_dtb L4TConfiguration.dtbo,L4TRootfsInfo.dtbo,tegra194-p2822-camera-dual-imx274-overlay.dtbo,tegra194-p2822-camera-e3331-overlay.dtbo,tegra194-p2822-camera-e3333-overlay.dtbo,tegra194-p2822-camera-imx185-overlay.dtbo,tegra194-p2822-camera-imx390-overlay.dtbo,tegra194-p2888-0005-overlay.dtbo,tegra194-p2888-0001-p2822-0000-overlay.dtbo  \
+        --bldtb ${DTBFILE} \
+        --applet mb1_t194_prod.bin --cmd "sign" \
         --soft_fuses tegra194-mb1-soft-fuses-l4t.cfg  \
-        --cfg flash.xml \
-        --chip 0x19 \
-        --device_config tegra19x-mb1-bct-device-qspi-p3668.cfg \
-        --misc_cold_boot_config tegra194-mb1-bct-misc-l4t.cfg \
-        --misc_config tegra194-mb1-bct-misc-flash.cfg \
-        --pinmux_config tegra19x-mb1-pinmux-p3668-a01.cfg \
-        --gpioint_config tegra194-mb1-bct-gpioint-p3668-0001-a00.cfg \
-        --pmic_config tegra194-mb1-bct-pmic-p3668-0001-a00.cfg \
-        --pmc_config tegra19x-mb1-padvoltage-p3668-a01.cfg \
-        --prod_config tegra19x-mb1-prod-p3668-0001-a00.cfg \
-        --scr_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg \
-        --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini-p3668.cfg \
-        --br_cmd_config tegra194-mb1-bct-reset-p3668-0001-a00.cfg \
-        --dev_params tegra194-br-bct-qspi.cfg \
-        --bin "${bins}"
+        --cfg flash.xml --chip 0x19 --uphy_config tegra194-mb1-uphy-lane-p2888-0000-p2822-0000.cfg \
+        --minratchet_config tegra194-mb1-bct-ratchet-p2888-0000-p2822-0000.cfg \
+        --device_config tegra19x-mb1-bct-device-sdmmc.cfg --misc_cold_boot_config tegra194-mb1-bct-misc-l4t.cfg --misc_config tegra194-mb1-bct-misc-flash.cfg --pinmux_config tegra19x-mb1-pinmux-p2888-0000-a04-p2822-0000-b01.cfg --gpioint_config tegra194-mb1-bct-gpioint-p2888-0000-p2822-0000.cfg --pmic_config tegra194-mb1-bct-pmic-p2888-0001-a04-E-0-p2822-0000.cfg --pmc_config tegra19x-mb1-padvoltage-p2888-0000-a00-p2822-0000-a00.cfg --prod_config tegra19x-mb1-prod-p2888-0000-p2822-0000.cfg --scr_config tegra194-mb1-bct-scr-cbb-mini.cfg --scr_cold_boot_config tegra194-mb1-bct-scr-cbb-mini.cfg --br_cmd_config tegra194-mb1-bct-reset-p2888-0000-p2822-0000.cfg --dev_params tegra194-br-bct-sdmmc.cfg,tegra194-br-bct_b-sdmmc.cfg  --bin "mb2_bootloader nvtboot_recovery_t194.bin; mts_preboot preboot_c10_prod_cr.bin; mts_mce mce_c10_prod_cr.bin; mts_proper mts_c10_prod_cr.bin; bpmp_fw bpmp-2_t194.bin; bpmp_fw_dtb tegra194-a02-bpmp-p2888-a04_lz4.dtb; spe_fw spe_t194.bin; tos tos-optee_t194.img; eks eks.img; bootloader_dtb ${DTBFILE}"   --secondary_gpt_backup  --bct_backup  --boot_chain A 
+
 }
 
 do_configure() {
     local destdir="${WORKDIR}/tegraflash"
     local lnxfile="${LNXFILE}"
     local f
-    PATH="${STAGING_BINDIR_NATIVE}/tegra186-flash:${PATH}"
+    PATH="${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}:${PATH}"
     rm -rf "${WORKDIR}/tegraflash"
     mkdir -p "${WORKDIR}/tegraflash"
     oldwd=`pwd`
     cd "${WORKDIR}/tegraflash"
-    ln -sf "${STAGING_DATADIR}/tegraflash/bsp_version" .
-    ln -s "${STAGING_DATADIR}/tegraflash/${MACHINE}.cfg" .
-    ln -s "${STAGING_DATADIR}/tegraflash/${MACHINE}-override.cfg" .
-    ln -s "${DEPLOY_DIR_IMAGE}/cboot-${MACHINE}.bin" ./cboot_t194.bin
-    ln -s "${DEPLOY_DIR_IMAGE}/tos-${MACHINE}.img" ./tos-trusty_t194.img
-    cp "${DEPLOY_DIR_IMAGE}/bootlogo-${MACHINE}.blob" ./bmp.blob
-    mkdir -p ${DEPLOY_DIR_IMAGE}/bootfiles
-    cp ./cboot_t194.bin ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp ./bmp.blob ${DEPLOY_DIR_IMAGE}/bootfiles/
-
+    cp "${STAGING_DATADIR}/tegraflash/bsp_version" .
+    cp "${STAGING_DATADIR}/tegraflash/${EMMC_BCT}" .
+    cp "${STAGING_DATADIR}/tegraflash/${EMMC_BCT_OVERRIDE}" .
+    cp "${IMAGE_TEGRAFLASH_KERNEL}" ./${LNXFILE}
+    if [ -n "${DATAFILE}" -a -n "${IMAGE_TEGRAFLASH_DATA}" ]; then
+        cp "${IMAGE_TEGRAFLASH_DATA}" ./${DATAFILE}
+        DATAARGS="--datafile ${DATAFILE}"
+    fi
+    cp "${DEPLOY_DIR_IMAGE}/uefi_jetson.bin" ./uefi_jetson.bin
+    cp "${DEPLOY_DIR_IMAGE}/tos-${MACHINE}.img" ./${TOSIMGFILENAME}
     for f in ${BOOTFILES}; do
-        ln -s "${STAGING_DATADIR}/tegraflash/$f" .
-        cp "${STAGING_DATADIR}/tegraflash/$f" ${DEPLOY_DIR_IMAGE}/bootfiles/
+        cp "${STAGING_DATADIR}/tegraflash/$f" .
     done
-
+    cp mb1_t194_prod.bin mb1_b_t194_prod.bin
+    rm -rf ./rollback
+    mkdir -p ./rollback
+    #cp -R ${STAGING_DATADIR}/nv_tegra/rollback/t${@d.getVar('NVIDIA_CHIP')[2:]}x ./rollback/
     cp ${STAGING_DATADIR}/tegraflash/flashvars .
-    . ./flashvars
-
+    sed -i -e "s/@OVERLAY_DTB_FILE@/${OVERLAY_DTB_FILE}/" ./flashvars
     for f in ${STAGING_DATADIR}/tegraflash/tegra19[4x]-*.cfg; do
-        ln -s $f .
-        cp $f ${DEPLOY_DIR_IMAGE}/bootfiles/
+        cp $f .
     done
-
     for f in ${STAGING_DATADIR}/tegraflash/tegra194-*-bpmp-*.dtb; do
         cp $f .
     done
-
-    if [ -n "${NVIDIA_BOARD_CFG}" ]; then
-        ln -s "${STAGING_DATADIR}/tegraflash/board_config_${MACHINE}.xml" .
-        boardcfg=board_config_${MACHINE}.xml
-    else
-        boardcfg=
+    cp -r ${DEPLOY_DIR_IMAGE}/*.dtbo .
+    cp -r ${DEPLOY_DIR_IMAGE}/*.dtb .
+    for dtbo in ${DTB_OVERLAYS}; do
+        cp "${TMPDIR}/work-shared/L4T-${L4T_BSP_ARCH}-${PV}-${PR}/Linux_for_Tegra/kernel/dtb/${dtbo}" .
+    done
+    if [ "${TEGRA_SIGNING_EXCLUDE_TOOLS}" != "1" ]; then
+        cp -R ${STAGING_BINDIR_NATIVE}/${FLASHTOOLS_DIR}/* .
     fi
-    export boardcfg
-
-    sed -i -e "s/\[DTBNAME\]/${DTBNAME}/g" ${WORKDIR}/partition_specification194_nxde_sdcard.txt
-
-    ln -s ${STAGING_BINDIR_NATIVE}/tegra186-flash .
-
-    cp "${DEPLOY_DIR_IMAGE}/${DTBFILE}" ./${DTBFILE}
-
-    # This one is used to ensure carrier boards have
-    # the same bldtb, so that the generated boot0.img
-    # has valid signatures.
-    cp "${DEPLOY_DIR_IMAGE}/tegra194-p3668-all-p3509-0000.dtb" .
-
-    # These reside on the eMMC, can differ from bldtb
-    cp ./${DTBFILE} ./${DTBNAME}-rootA.dtb
-    cp ./${DTBFILE} ./${DTBNAME}-rootB.dtb
-
-    # Add rootA/rootB and save as separate dtbs to be used when
-    # switching partitions
-    bootargs="`fdtget ./${DTBFILE} /chosen bootargs 2>/dev/null`"
-    fdtput -t s ./${DTBNAME}-rootA.dtb /chosen bootargs "$bootargs ${ROOTA_ARGS} "
-    fdtput -t s ./${DTBNAME}-rootB.dtb /chosen bootargs "$bootargs ${ROOTB_ARGS} "
-
-    # Need to switch back to default values from flashing, otherwise bootloader dtb offset inside boot0.img will
-    # change and will generate signature failure in MB2.
-    bldtbchosenargs="console=ttyTCU0,115200"
-    bldtbdtsname="/dvs/git/dirty/git-master_linux/kernel/kernel-4.9/arch/arm64/boot/dts/../../../../../../hardware/nvidia/platform/t19x/jakku/kernel-dts/tegra194-p3668-all-p3509-0000.dts"
-
-    # Do not overide this hardcoded dtb for any carrier boards, because it is used for bldtb in boot0.img
-    fdtput -t s ./tegra194-p3668-all-p3509-0000.dtb / "nvidia,dtsfilename" $bldtbdtsname
-    fdtput -t s ./tegra194-p3668-all-p3509-0000.dtb /chosen bootargs $bldtbchosenargs
-
-    # Make bootable image from kernel and sign it
-    cp ${DEPLOY_DIR_IMAGE}/${LNXFILE} ${LNXFILE}
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/mkbootimg ./
-    # mkbootimg really needs initrd, even if empty
-    touch initrd
-    ./mkbootimg --kernel ${LNXFILE} --ramdisk initrd --board mmcblk0p1 --output boot.img
 
     # prepare flash.xml.in to be used in signing
-    cp ${WORKDIR}/${FLASHXML} flash.xml.in
+    cp ${WORKDIR}/resinOS-flash194_nxde_sdcard.xml flash.xml.in
+    sed -i "s, DTB_NAME, ${DTBFILE},g" flash.xml.in
+
+    sed -i -e "s/\[DTB_NAME\]/$(echo ${DTBFILE} | cut -d '.' -f 1)/g" ${WORKDIR}/partition_specification194_nxde_sdcard.txt
 
+    sed -e"s,MB1FILE,mb1_b_t194_prod.bin,2" flash.xml.in | \
+        sed \
+        -e"s,LNXFILE_b,$lnxfile," \
+        -e"s,LNXFILE,$lnxfile," -e"s,LNXSIZE,${LNXSIZE}," \
+        -e"s,TEGRABOOT,nvtboot_t194.bin," \
+        -e"s,MTSPREBOOT,preboot_c10_prod_cr.bin," \
+        -e"s,MTS_MCE,mce_c10_prod_cr.bin," \
+        -e"s,MTSPROPER,mts_c10_prod_cr.bin," \
+        -e"s,MB1FILE,mb1_t194_prod.bin," \
+        -e"s,BPFFILE,bpmp-2_t194.bin," \
+        -e"s,TBCFILE,uefi_jetson.bin," \
+        -e"s,CAMERAFW,camera-rtcpu-t194-rce.img," \
+        -e"s,BPFDTB_FILE,tegra194-a02-bpmp-p2888-a04_lz4.dtb," \
+        -e"s,DRAMECCTYPE,dram_ecc," -e"s,DRAMECCFILE,dram-ecc-t194.bin," -e"s,DRAMECCNAME,dram-ecc-fw," \
+        -e"s,SPEFILE,spe_t194.bin," \
+        -e"s,WB0BOOT,warmboot_t194_prod.bin," \
+        -e"s,TOSFILE,${TOSIMGFILENAME}," \
+        -e"s,EKSFILE,eks.img," \
+        -e"s,RECNAME,recovery," -e"s,RECSIZE,66060288," -e"s,RECDTB-NAME,recovery-dtb," -e"s,BOOTCTRLNAME,kernel-bootctrl," \
+        -e"/RECFILE/d" -e"/RECDTB-FILE/d" -e"/BOOTCTRL-FILE/d" \
+        -e"s,APPSIZE,${ROOTFSPART_SIZE}," \
+        -e"s,RECROOTFSSIZE,${RECROOTFSSIZE}," \
+        -e"s,APPUUID_b,," -e"s,APPUUID,," \
+        -e"s,ESP_FILE,esp.img," -e"/VARSTORE_FILE/d" \
+        > flash.xml
     # prep env for tegraflash
-    rm -f ./slot_metadata.bin
-    cp ${STAGING_DATADIR}/tegraflash/slot_metadata.bin ./
-    mkdir ./rollback
 
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/rollback_parser.py ./rollback/
-    ln -snf ${STAGING_DATADIR}/nv_tegra/rollback/t${@d.getVar('NVIDIA_CHIP')[2:]}x ./rollback/
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/BUP_generator.py ./
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/${SOC_FAMILY}-flash-helper.sh ./
-    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/tegraflash.py ./
+#    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/rollback_parser.py ./rollback/
+#    ln -snf ${STAGING_DATADIR}/nv_tegra/rollback/t${@d.getVar('NVIDIA_CHIP')[2:]}x ./rollback/
+#    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/BUP_generator.py ./
+#    ln -sf ${STAGING_BINDIR_NATIVE}/tegra186-flash/${SOC_FAMILY}-flash-helper.sh ./
 
+    # bup is based on the rootfs, which is not built at this point
+    # not using it for the moment
+    # sed -e 's,^function ,,' ${STAGING_BINDIR_NATIVE}/tegra186-flash/l4t_bup_gen.func > ./l4t_bup_gen.func
     rm -rf signed
-
+    echo "35.1.0" > VERFILE
     # Sign all tegra bins
-    signfile
-
-    signfile " ${DTBNAME}-rootA.dtb"
-    signfile " ${DTBNAME}-rootB.dtb"
-
-    # Used in boot0.img
-    signfile " tegra194-p3668-all-p3509-0000.dtb"
+    signfile ""
 
     # Needed to embedd plain initramfs kernel and dtb to main image
-    cp $localbootfile ${DEPLOY_DIR_IMAGE}/bootfiles/Image
-
-    cp -r ${DTBNAME}-root*.dtb* ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp ${WORKDIR}/${FLASHXML} ${DEPLOY_DIR_IMAGE}/bootfiles/flash.xml
+    cp ${LNXFILE} ${DEPLOY_DIR_IMAGE}/bootfiles/Image
+    cp ${WORKDIR}/resinOS-flash194_nxde_sdcard.xml ${DEPLOY_DIR_IMAGE}/bootfiles/flash.xml
     cp -r signed/* ${DEPLOY_DIR_IMAGE}/bootfiles/
-    cp tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt ${DEPLOY_DIR_IMAGE}/bootfiles/
 
-    dd if=/dev/zero count=1 bs=33554432 | tr "\000" "\377" > boot0.img
-    dd if=/dev/zero bs=2887 count=1 of=boot0.img conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=4096 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=32768 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=65536 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/br_bct_BR.bct of=boot0.img seek=98304 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_t194_prod_sigheader.bin.encrypt of=boot0.img seek=131072 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_t194_prod_sigheader.bin.encrypt of=boot0.img seek=393216 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_cold_boot_bct_MB1_sigheader.bct.encrypt of=boot0.img seek=655360 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mb1_cold_boot_bct_MB1_sigheader.bct.encrypt of=boot0.img seek=720896 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mem_coldboot_sigheader.bct.encrypt of=boot0.img seek=786432 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mem_coldboot_sigheader.bct.encrypt of=boot0.img seek=1048576 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/spe_t194_sigheader.bin.encrypt of=boot0.img seek=1310720 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/spe_t194_sigheader.bin.encrypt of=boot0.img seek=1572864 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/nvtboot_t194_sigheader.bin.encrypt of=boot0.img seek=1835008 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/nvtboot_t194_sigheader.bin.encrypt of=boot0.img seek=2097152 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/preboot_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2359296 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/preboot_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2424832 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mce_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2490368 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mce_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2686976 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mts_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=2883584 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/mts_c10_prod_cr_sigheader.bin.encrypt of=boot0.img seek=7077888 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/warmboot_t194_prod_sigheader.bin.encrypt of=boot0.img seek=11272192 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/warmboot_t194_prod_sigheader.bin.encrypt of=boot0.img seek=11403264 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/slot_metadata.bin of=boot0.img seek=11534336 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/slot_metadata.bin of=boot0.img seek=11599872 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/xusb_sil_rel_fw of=boot0.img seek=11665408 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/xusb_sil_rel_fw of=boot0.img seek=11862016 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cboot_t194_sigheader.bin.encrypt of=boot0.img seek=12058624 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cboot_t194_sigheader.bin.encrypt of=boot0.img seek=13500416 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt of=boot0.img seek=14942208 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-p3668-all-p3509-0000_sigheader.dtb.encrypt of=boot0.img seek=15400960 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bmp.blob of=boot0.img seek=15859712 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bmp.blob of=boot0.img seek=16056320 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tos-trusty_t194_sigheader.img.encrypt of=boot0.img seek=16252928 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tos-trusty_t194_sigheader.img.encrypt of=boot0.img seek=18874368 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/eks_sigheader.img.encrypt of=boot0.img seek=21495808 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/eks_sigheader.img.encrypt of=boot0.img seek=21561344 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/adsp-fw_sigheader.bin.encrypt of=boot0.img seek=21626880 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/adsp-fw_sigheader.bin.encrypt of=boot0.img seek=22675456 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/camera-rtcpu-rce_sigheader.img.encrypt of=boot0.img seek=23724032 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/camera-rtcpu-rce_sigheader.img.encrypt of=boot0.img seek=24772608 bs=1 conv=notrunc
-
-    # sce-fw empty both a+b
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bpmp_t194_sigheader.bin.encrypt of=boot0.img seek=27918336 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/bpmp_t194_sigheader.bin.encrypt of=boot0.img seek=29491200 bs=1 conv=notrunc
-
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-a02-bpmp-p3668-a00_sigheader.dtb.encrypt of=boot0.img seek=31064064 bs=1 conv=notrunc
-    dd if=${DEPLOY_DIR_IMAGE}/bootfiles/tegra194-a02-bpmp-p3668-a00_sigheader.dtb.encrypt of=boot0.img seek=32112640 bs=1 conv=notrunc
-
-    # boot option file is empty on a clean flashed board, will leave it here
-    # for offset refference
-    #dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cbo.dtb seek=33161216 bs=1 conv=notrunc
-    #dd if=${DEPLOY_DIR_IMAGE}/bootfiles/cbo.dtb seek=33226752 bs=1 conv=notrunc
-
-    # For 32.6.1 /opt/tegra-binaries/boot0.img MD5 should have the same MD5
-    # even if building images for compatible carrier boards. If it isn't identical,
-    # then board won't boot after HUP.
-    cp ${WORKDIR}/${BOOT_BINDIFF} .
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14942224 bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14945200 skip=32  bs=1 count=80 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15400976 skip=112  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15400992 skip=144  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15403952 skip=176  bs=1 count=80 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=16252944 skip=256  bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=16255920 skip=288  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=18874384 skip=292  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=18877360 skip=356  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21495824 skip=360  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21498800 skip=424  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21561360 skip=428  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=21564336 skip=492  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=27918352 skip=496  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=27921328 skip=560  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=29491216 skip=564  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=29494192 skip=628  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31064080 skip=632  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067056 skip=696  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=32112656 skip=700  bs=1 count=64 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=32115632 skip=764  bs=1 count=4 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33292288 skip=768  bs=1 count=256 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33357824 skip=1024 bs=1 count=256 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=33537536 skip=1280 bs=1 count=16896 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=14946816 skip=18176 bs=1 count=48 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15101952 skip=18224 bs=1 count=128 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15405568 skip=18352 bs=1 count=48 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=15560704 skip=18400 bs=1 count=128 conv=notrunc
-
-    # Needed starting with 32.6.1
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067056 skip=18528 bs=1 count=16 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31067104 skip=18544 bs=1 count=32 conv=notrunc
-    dd if=${BOOT_BINDIFF} of=boot0.img seek=31068160 skip=18576 bs=1 count=64 conv=notrunc
+    dd if=/dev/zero of=boot0.img bs=8388608 count=1
+    #TODO: Signed binary
+
+    cp boot0.img ${DEPLOY_DIR_IMAGE}/bootfiles/
 }
 
+
 do_install() {
     install -d ${D}/${BINARY_INSTALL_PATH}
     cp -r ${S}/tegraflash/signed/* ${D}/${BINARY_INSTALL_PATH}
-
-    cp ${S}/tegraflash/${DTBNAME}-rootA.dtb ${D}/${BINARY_INSTALL_PATH}/
-    cp ${WORKDIR}/partition_specification194_nxde_sdcard.txt ${D}/${BINARY_INSTALL_PATH}/
-    cp -r ${S}/tegraflash/${DTBNAME}-root*sigheader.dtb.encrypt ${D}/${BINARY_INSTALL_PATH}
-    cp ${S}/tegraflash/boot0.img ${D}/${BINARY_INSTALL_PATH}
-    # When generating image, this will be default dtb containing cmdline with root set to resin-rootA
-    cp ${S}/tegraflash/${DTBNAME}-rootA_sigheader.dtb.encrypt ${DEPLOY_DIR_IMAGE}/bootfiles/${DTBNAME}_sigheader.dtb.encrypt
+    rm ${D}/${BINARY_INSTALL_PATH}/boot*im* || true
+    cp ${WORKDIR}/partition_specification194_nxde_sdcard.txt ${D}/${BINARY_INSTALL_PATH}/ 
 }
 
 do_deploy() {
-    rm -rf ${DEPLOYDIR}/$(basename ${BINARY_INSTALL_PATH})
-    mkdir -p ${DEPLOYDIR}/$(basename ${BINARY_INSTALL_PATH})
-    cp -r ${D}/${BINARY_INSTALL_PATH}/* ${DEPLOYDIR}/$(basename ${BINARY_INSTALL_PATH})
+    rm -rf ${DEPLOY_DIR_IMAGE}/$(basename ${BINARY_INSTALL_PATH})
+    mkdir -p ${DEPLOY_DIR_IMAGE}/$(basename ${BINARY_INSTALL_PATH})
+    cp -r ${D}/${BINARY_INSTALL_PATH}/* ${DEPLOY_DIR_IMAGE}/$(basename ${BINARY_INSTALL_PATH})
 }
 
 FILES:${PN} += "${BINARY_INSTALL_PATH}"
@@ -407,7 +233,6 @@ do_configure[depends] += " tegra-binaries:do_preconfigure"
 do_configure[depends] += " virtual/kernel:do_deploy \
                            virtual/bootloader:do_deploy \
 "
-do_configure[depends] += " cboot:do_deploy"
 do_configure[depends] += " tos-prebuilt:do_deploy"
 
 do_install[depends] += " virtual/kernel:do_deploy"
@@ -415,4 +240,4 @@ do_populate_lic[depends] += "tegra-binaries:do_unpack"
 
 addtask do_deploy before do_package after do_install
 
-COMPATIBLE_MACHINE = "jetson-xavier-nx-devkit"
+COMPATIBLE_MACHINE = "jetson-xavier"
diff --git a/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra/0007-Add-hup-and-rollback-support-xav-nx-sd.patch b/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra/0007-Add-hup-and-rollback-support-xav-nx-sd.patch
new file mode 100644
index 0000000..d2c78de
--- /dev/null
+++ b/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra/0007-Add-hup-and-rollback-support-xav-nx-sd.patch
@@ -0,0 +1,592 @@
+L4TLauncher: Add HUP and rollbacks support
+
+L4TLauncher is loaded by the UEFI firmware from
+the resin-boot partition. The launcher's name
+is BOOTAARCH64.efi.
+
+With this patch, the Nvidia bootloader parses resinos_uEnv.txt,
+extra_uEnv.txt and bootcount.env in order to load the
+extlinux.conf and the selected dtb from the current active
+rootfs.
+
+The A/B rootfs switch logic implemented in this change
+is the same as the one that exists in balenaOS u-boot and is
+compatible with the dtb selection mechanism implemented in the
+Supervisor for the rest of the boards that use u-boot.
+
+Upstream-status: Inappropriate [configuration]
+Signed-off-by: Alexandru Costache <alexandru@balena.io>
+Index: edk2-tegra/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.c
+===================================================================
+--- edk2-tegra.orig/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.c
++++ edk2-tegra/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.c
+@@ -395,6 +395,7 @@ UpdateBootCfgFile (
+   }
+ 
+   Status = FileHandleWrite (FileHandle, &CorrectSize, CorrectPartitionContent);
++
+   if (EFI_ERROR (Status)) {
+     ErrorPrint (L"%a: Failed to write file content\r\n", __FUNCTION__);
+     return Status;
+@@ -906,6 +907,7 @@ CheckCommandString (
+ 
+   if (StrnCmp (CommandLine, Key, StrLen (Key)) == 0) {
+     Value = CleanExtLinuxLine (CommandLine + StrLen (Key));
++
+     if (Buffer != NULL) {
+       *Buffer = AllocateCopyPool (StrSize (Value), Value);
+       if (*Buffer == NULL) {
+@@ -919,6 +921,130 @@ CheckCommandString (
+   return EFI_NOT_FOUND;
+ }
+ 
++STATIC
++EFI_STATUS
++EFIAPI
++CheckDtbExists (
++  IN EFI_HANDLE             DeviceHandle,
++  IN UINT32                 BootChain,
++  IN CONST CHAR16           *BalenaOSRootFs,
++  IN CONST CHAR16           *DtbPath
++  )
++{
++  EFI_STATUS       Status;
++  EFI_DEVICE_PATH  *FullDevicePath;
++  EFI_DEVICE_PATH  *TmpFullDevicePath;
++  EFI_FILE_HANDLE  FileHandle = NULL;
++  EFI_HANDLE       RootFsHandle;
++
++  if (NULL == BalenaOSRootFs || NULL == DtbPath) {
++      return EFI_INVALID_PARAMETER;
++  }
++
++  Status = FindPartitionInfo (DeviceHandle, BalenaOSRootFs, BootChain, NULL, &RootFsHandle);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Unable to find partition info\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  FullDevicePath = FileDevicePath (RootFsHandle, DtbPath);
++  if (NULL == FullDevicePath) {
++    ErrorPrint (L"%a: Failed to create file device path\r\n", __FUNCTION__);
++    return EFI_OUT_OF_RESOURCES;
++  }
++
++  TmpFullDevicePath = FullDevicePath;
++  Status = EfiOpenFileByDevicePath (&TmpFullDevicePath, &FileHandle, EFI_FILE_MODE_READ, 0);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Failed to open dtb file %r\r\n", __FUNCTION__, Status);
++  }
++
++  if (FileHandle != NULL) {
++    FileHandleClose (FileHandle);
++  }
++  return Status;
++}
++
++STATIC
++EFI_STATUS
++EFIAPI
++ProcessExtrauEnv (
++  IN EFI_HANDLE            DeviceHandle,
++  IN UINT32                BootChain,
++  IN CONST CHAR16          *BalenaOSRootFs,
++  OUT CHAR16               **CustomFdtName
++)
++{
++  EFI_STATUS       Status;
++  EFI_HANDLE       BootPartHandle;
++  EFI_DEVICE_PATH  *FullDevicePath;
++  EFI_DEVICE_PATH  *TmpFullDevicePath;
++  EFI_FILE_HANDLE  FileHandle = NULL;
++  CHAR16           *FileLine = NULL;
++  CHAR16           *CleanLine;
++  CHAR16           *DtbName = NULL;
++  BOOLEAN          Ascii;
++
++  Status = FindPartitionInfo (DeviceHandle, BALENA_BOOT_PARTITION, BootChain, NULL, &BootPartHandle);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Unable to find boot partition\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  FullDevicePath = FileDevicePath (BootPartHandle, BALENA_EXTRA_UENV_FILE);
++
++  if (NULL == FullDevicePath) {
++      ErrorPrint (L"%a: Failed to create file device path to extra_uEnv.txt\r\n", __FUNCTION__);
++      return EFI_OUT_OF_RESOURCES;
++  }
++
++  TmpFullDevicePath = FullDevicePath;
++  Status = EfiOpenFileByDevicePath (&TmpFullDevicePath, &FileHandle, EFI_FILE_MODE_READ, 0);
++
++  if (EFI_ERROR (Status)) {
++      ErrorPrint (L"%a: Failed to open file extra_uEnv.txt: %r\r\n", __FUNCTION__, Status);
++      return Status;
++  }
++
++  while (!FileHandleEof (FileHandle)) {
++    if (FileLine != NULL) {
++      FreePool (FileLine);
++      FileLine = NULL;
++    }
++    FileLine = FileHandleReturnLine (FileHandle, &Ascii);
++
++    if (NULL == FileLine) {
++      break;
++    }
++
++    CleanLine = CleanExtLinuxLine (FileLine);
++    if (*CleanLine != CHAR_NULL) {
++      DtbName = StrStr(CleanLine, L"custom_fdt_file=");
++      if (NULL != DtbName) {
++        DtbName += StrLen(L"custom_fdt_file=");
++        *CustomFdtName = AllocateZeroPool(MAX_DTB_PATH_LEN);
++        UnicodeSPrint (*CustomFdtName, MAX_DTB_PATH_LEN - 1, L"boot\\%s\0", DtbName);
++        Status = CheckDtbExists(DeviceHandle, BootChain, BalenaOSRootFs, *CustomFdtName);
++        if (EFI_ERROR(Status)) {
++          ErrorPrint(L"DTB set in extrauEnv does not exist!\n");
++          return Status;
++        }
++      }
++    }
++
++    if (FileHandle != NULL) {
++      FileHandleClose (FileHandle);
++    }
++
++    if (FileLine != NULL) {
++      FreePool (FileLine);
++      FileLine = NULL;
++    }
++  }
++
++  return EFI_SUCCESS;
++}
++
+ /**
+   Process the extlinux.conf file
+ 
+@@ -936,6 +1062,7 @@ EFIAPI
+ ProcessExtLinuxConfig (
+   IN EFI_HANDLE             DeviceHandle,
+   IN UINT32                 BootChain,
++  IN CONST CHAR16           *BalenaOSRootFs,
+   OUT EXTLINUX_BOOT_CONFIG  *BootConfig,
+   OUT EFI_HANDLE            *RootFsHandle
+   )
+@@ -949,8 +1076,11 @@ ProcessExtLinuxConfig (
+   CHAR16           *Timeout      = NULL;
+   CHAR16           *CbootArg     = NULL;
+   CHAR16           *PostCbootArg = NULL;
++  CONST CHAR16     *RootL = L"root=LABEL=";
+   BOOLEAN          Ascii;
+   UINTN            Index;
++  CHAR16           *UpdatedCmdline = NULL;
++  UINTN            argsSize;
+ 
+   ZeroMem (BootConfig, sizeof (EXTLINUX_BOOT_CONFIG));
+ 
+@@ -958,21 +1088,11 @@ ProcessExtLinuxConfig (
+     return EFI_INVALID_PARAMETER;
+   }
+ 
+-  Status = FindPartitionInfo (DeviceHandle, ROOTFS_BASE_NAME, BootChain, NULL, RootFsHandle);
+-  if (EFI_ERROR (Status)) {
+-    ErrorPrint (L"%a: Unable to find partition info\r\n", __FUNCTION__);
+-    return Status;
+-  }
++  /* Load extlinux.conf from the selected BalenaOS root filesystem */
++  Status = FindPartitionInfo (DeviceHandle, BalenaOSRootFs, BootChain, NULL, RootFsHandle);
+ 
+-  Status = VerifyDetachedCertificateFile (
+-             EXTLINUX_CONF_PATH,
+-             *RootFsHandle,
+-             &FileHandle,
+-             NULL,
+-             NULL
+-             );
+   if (EFI_ERROR (Status)) {
+-    ErrorPrint (L"%a:sds Failed to Authenticate %s (%r)\r\n", __FUNCTION__, EXTLINUX_CONF_PATH, Status);
++    ErrorPrint (L"%a: Unable to find partition info\r\n", __FUNCTION__);
+     return Status;
+   }
+ 
+@@ -1050,11 +1170,48 @@ ProcessExtLinuxConfig (
+         }
+ 
+         Status = CheckCommandString (CleanLine, EXTLINUX_KEY_FDT, &BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath);
++
+         if (!EFI_ERROR (Status)) {
++          /* extlinux.conf contains a "FDT default" entry */
++          if (0 == StrnCmp(BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath, EXTLINUX_GENERIC_FDT, StrLen (EXTLINUX_GENERIC_FDT))) {
++            if (NULL != BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath) {
++              /* Replace "FDT default" with the default Oring AGX device-tree path as fall-back in case the extra_uEnv.txt-defined dtb cannot be loaded */
++              FreePool(BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath);
++              BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath = AllocateZeroPool(MAX_DTB_PATH_LEN);
++              UnicodeSPrint (BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath, MAX_DTB_PATH_LEN - 1, L"/boot/%s\0", DEFAULT_AGX_ORIN_DTB_NAME);
++
++              /* Check if a device-tree name is set in extra_uEnv.txt */
++              CHAR16 *ExtrauEnvDtb = NULL;
++              Status = ProcessExtrauEnv(DeviceHandle, BootChain, BalenaOSRootFs, &ExtrauEnvDtb);
++
++	      if (!EFI_ERROR(Status)) {
++	        /* The device-tree set in extra_uEnv.txt will be loaded */
++	        FreePool(BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath);
++	        BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath = ExtrauEnvDtb;
++	      }
++            }
++         } else {
++             Print(L"Kernel device-tree is %s\n", BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].DtbPath);
++         }
++
+           continue;
+         }
+ 
+         Status = CheckCommandString (CleanLine, EXTLINUX_KEY_APPEND, &BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs);
++        argsSize = StrSize (BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs);
++        UpdatedCmdline = AllocateZeroPool (argsSize + StrSize(RootL) + StrSize(BalenaOSRootFs) + 2);
++        if (NULL == UpdatedCmdline) {
++            ErrorPrint (L"%a: Failed to allocate memory for updated cmdline %d\r\n", __FUNCTION__);
++            return EFI_OUT_OF_RESOURCES;
++        }
++
++        /* Append root label to cmdline that has been read from the extlinux.conf read from the active rootfs */
++        UnicodeSPrint (UpdatedCmdline, StrSize(RootL) + StrSize(BalenaOSRootFs) + argsSize, L"%s %s%s\0", BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs, RootL, BalenaOSRootFs);
++        if (NULL != BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs) {
++          FreePool(BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs);
++        }
++        BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs = UpdatedCmdline;
++
+         if (!EFI_ERROR (Status)) {
+           CbootArg = StrStr (BootConfig->BootOptions[BootConfig->NumberOfBootOptions-1].BootArgs, EXTLINUX_CBOOT_ARG);
+           if (CbootArg != NULL) {
+@@ -2321,6 +2478,221 @@ Exit:
+   return Status;
+ }
+ 
++STATIC
++EFI_STATUS
++EFIAPI
++WriteBootCountFile (
++  IN EFI_HANDLE            DeviceHandle,
++  IN UINT32                BootChain,
++  IN UINT32                BootCountValue
++)
++{
++  EFI_STATUS       Status;
++  EFI_DEVICE_PATH  *FullDevicePath;
++  EFI_DEVICE_PATH  *TmpFullDevicePath;
++  EFI_FILE_HANDLE  FileHandle = NULL;
++  CHAR8            BootCountContent[11];
++  UINTN            BootCountFileSize;
++  EFI_HANDLE       BootPartHandle;
++
++  Status = FindPartitionInfo (DeviceHandle, BALENA_BOOT_PARTITION, BootChain, NULL, &BootPartHandle);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Unable to find partition resin-boot\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  FullDevicePath = FileDevicePath (BootPartHandle, BALENA_BOOTCOUNT_FILE_PATH);
++  if (NULL == FullDevicePath) {
++    ErrorPrint (L"%a: Failed to create file device path bootcount.env\r\n", __FUNCTION__);
++    return EFI_OUT_OF_RESOURCES;
++  }
++
++  TmpFullDevicePath = FullDevicePath;
++  Status = EfiOpenFileByDevicePath (&TmpFullDevicePath, &FileHandle, EFI_FILE_MODE_READ|EFI_FILE_MODE_WRITE|EFI_FILE_MODE_CREATE, 0);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Failed to open file bootcount.env: %r\r\n", __FUNCTION__, Status);
++    return Status;
++  }
++
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Failed to set file size to 0\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  BootCountFileSize = AsciiSPrint (BootCountContent, 12, "bootcount=%d\0", BootCountValue);
++  Status = FileHandleWrite (FileHandle, &BootCountFileSize, BootCountContent);
++
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Failed to write bootcount file contents\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  if (FileHandle != NULL) {
++    FileHandleClose (FileHandle);
++  }
++
++  return EFI_SUCCESS;
++}
++
++
++STATIC
++EFI_STATUS
++EFIAPI
++ProcessBootCountValue (
++  IN EFI_HANDLE            DeviceHandle,
++  IN UINT32                BootChain,
++  OUT UINTN                *BootCountValue
++)
++{
++  EFI_STATUS       Status;
++  EFI_DEVICE_PATH  *FullDevicePath;
++  EFI_DEVICE_PATH  *TmpFullDevicePath;
++  EFI_HANDLE       BootPartHandle;
++  EFI_FILE_HANDLE  FileHandle = NULL;
++  CHAR16           *FileLine = NULL;
++  CHAR16           *CleanLine;
++  BOOLEAN          Ascii;
++
++  Status = FindPartitionInfo (DeviceHandle, BALENA_BOOT_PARTITION, BootChain, NULL, &BootPartHandle);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Could not find partition resin-boot\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  FullDevicePath = FileDevicePath (BootPartHandle, BALENA_BOOTCOUNT_FILE_PATH);
++  if (NULL == FullDevicePath) {
++    ErrorPrint (L"%a: Failed to create file device path for bootcount.env\r\n", __FUNCTION__);
++    return EFI_OUT_OF_RESOURCES;
++  }
++
++  TmpFullDevicePath = FullDevicePath;
++  Status = EfiOpenFileByDevicePath (&TmpFullDevicePath, &FileHandle, EFI_FILE_MODE_READ, 0);
++  if (EFI_ERROR (Status)) {
++    *BootCountValue = 1;
++    Status = WriteBootCountFile (DeviceHandle, BootChain, *BootCountValue);
++
++    if (EFI_ERROR (Status)) {
++      ErrorPrint (L"%a: Failed to write bootcount file contents\r\n", __FUNCTION__);
++      return Status;
++    } else {
++      Print(L"Initialized boot count to 1\r\n");
++    }
++  } else {
++     while (!FileHandleEof (FileHandle)) {
++       if (FileLine != NULL) {
++         FreePool (FileLine);
++         FileLine = NULL;
++       }
++
++       FileLine = FileHandleReturnLine (FileHandle, &Ascii);
++       if (NULL == FileLine) {
++         break;
++       }
++
++       CleanLine = CleanExtLinuxLine (FileLine);
++       if (*CleanLine != CHAR_NULL) {
++         if (StrStr(CleanLine, L"bootcount=")) {
++           *BootCountValue = StrDecimalToUintn(CleanLine + 10);
++           Print(L"%a: BootCount is %d : %s\r\n", __FUNCTION__, *BootCountValue);
++
++           if (FileHandle != NULL) {
++             FileHandleClose (FileHandle);
++           }
++         }
++
++         if (FileLine != NULL) {
++           FreePool (FileLine);
++           FileLine = NULL;
++         }
++
++         Status = WriteBootCountFile (DeviceHandle, BootChain, ++(*BootCountValue));
++         if (EFI_ERROR (Status)) {
++          ErrorPrint (L"%a: Failed to write bootcount file value %d\r\n", __FUNCTION__, *BootCountValue);
++         }
++
++         return Status;
++       }
++     }
++  }
++
++  return EFI_SUCCESS;
++}
++
++
++STATIC
++EFI_STATUS
++EFIAPI
++ProcessResinOSuEnv (
++  IN EFI_HANDLE            DeviceHandle,
++  IN UINT32                BootChain,
++  OUT UINTN                *RootPart,
++  OUT UINTN                *UpgradeAvailable
++)
++{
++  EFI_STATUS       Status;
++  EFI_HANDLE       BootPartHandle;
++  EFI_DEVICE_PATH  *FullDevicePath;
++  EFI_DEVICE_PATH  *TmpFullDevicePath;
++  EFI_FILE_HANDLE  FileHandle = NULL;
++  CHAR16           *FileLine = NULL;
++  CHAR16           *CleanLine;
++  BOOLEAN          Ascii;
++
++  Status = FindPartitionInfo (DeviceHandle, BALENA_BOOT_PARTITION, BootChain, NULL, &BootPartHandle);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Could not find partition Balena boot partition\r\n", __FUNCTION__);
++    return Status;
++  }
++
++  FullDevicePath = FileDevicePath (BootPartHandle, BALENA_BOOT_CONF_PATH);
++  if (NULL == FullDevicePath) {
++    ErrorPrint (L"%a: Failed to create path for resinOS_uEnvt.xt\r\n", __FUNCTION__);
++    return EFI_OUT_OF_RESOURCES;
++  }
++
++  TmpFullDevicePath = FullDevicePath;
++  Status = EfiOpenFileByDevicePath (&TmpFullDevicePath, &FileHandle, EFI_FILE_MODE_READ, 0);
++  if (EFI_ERROR (Status)) {
++    ErrorPrint (L"%a: Failed to open resinOS_uEnv.txt: %r\r\n", __FUNCTION__, Status);
++    return Status;
++  }
++
++  while (!FileHandleEof (FileHandle)) {
++    if (FileLine != NULL) {
++      FreePool (FileLine);
++      FileLine = NULL;
++    }
++
++    FileLine = FileHandleReturnLine (FileHandle, &Ascii);
++    if (NULL == FileLine) {
++      break;
++    }
++
++    CleanLine = CleanExtLinuxLine (FileLine);
++    if (*CleanLine != CHAR_NULL) {
++      if (StrStr(CleanLine, L"resin_root_part=")) {
++       *RootPart = StrDecimalToUintn(CleanLine + 16);
++       Print(L"RootPart is %d\r\n", *RootPart);
++      } else if (StrStr(CleanLine, L"upgrade_available=")) {
++        *UpgradeAvailable = StrDecimalToUintn(CleanLine + 18);
++        Print(L"UpgradeAvailable is %d\r\n", *UpgradeAvailable);
++      }
++    }
++  }
++
++  if (FileHandle != NULL) {
++    FileHandleClose (FileHandle);
++  }
++
++  if (FileLine != NULL) {
++    FreePool (FileLine);
++    FileLine = NULL;
++  }
++
++  return EFI_SUCCESS;
++}
++
++
+ /**
+   This is the declaration of an EFI image entry point. This entry point is
+   the same for UEFI Applications, UEFI OS Loaders, and UEFI Drivers, including
+@@ -2350,7 +2722,10 @@ L4TLauncher (
+   EXTLINUX_BOOT_CONFIG       ExtLinuxConfig;
+   UINTN                      ExtLinuxBootOption;
+   UINTN                      Index;
+-
++  CHAR16                     *BalenaOSRootFs = NULL;
++  UINTN                      UpgradeAvailable = 0;
++  UINTN                      BootCountValue = 0;
++  UINTN                      RootFsIndex = BALENA_ROOTFS_INDEX_A;
+   Status = gBS->HandleProtocol (ImageHandle, &gEfiLoadedImageProtocolGuid, (VOID **)&LoadedImage);
+   if (EFI_ERROR (Status)) {
+     ErrorPrint (L"%a: Unable to locate loaded image: %r\r\n", __FUNCTION__, Status);
+@@ -2363,6 +2738,8 @@ L4TLauncher (
+     return Status;
+   }
+ 
++  ErrorPrint(L"BalenaOS: Set BootMode to NVIDIA_L4T_BOOTMODE_DIRECT\r\r\n");
++  BootParams.BootMode = NVIDIA_L4T_BOOTMODE_DIRECT;
+   if (BootParams.BootMode == NVIDIA_L4T_BOOTMODE_GRUB) {
+     ErrorPrint (L"%a: Attempting GRUB Boot\r\n", __FUNCTION__);
+     do {
+@@ -2406,11 +2783,41 @@ L4TLauncher (
+   }
+ 
+   if (BootParams.BootMode == NVIDIA_L4T_BOOTMODE_DIRECT) {
+-    ErrorPrint (L"%a: Attempting Direct Boot\r\n", __FUNCTION__);
++    Print (L"%a: Attempt Direct Boot\r\n", __FUNCTION__);
+     do {
+-      Status = ProcessExtLinuxConfig (LoadedImage->DeviceHandle, BootParams.BootChain, &ExtLinuxConfig, &RootFsDeviceHandle);
++      Status = ProcessResinOSuEnv (LoadedImage->DeviceHandle, BootParams.BootChain, &RootFsIndex, &UpgradeAvailable);
++      if (EFI_ERROR (Status)) {
++         ErrorPrint(L"resinOS_uEnv.txt does not exist\n");
++      }
++
++      Print(L"Current resin_root_part=%d - upgrade_available=%d\r\n", RootFsIndex, UpgradeAvailable);
++      if (1 == UpgradeAvailable) {
++          Status = ProcessBootCountValue (LoadedImage->DeviceHandle, BootParams.BootChain, &BootCountValue);
++          if (EFI_ERROR (Status)) {
++              ErrorPrint(L"%a: Error while processing bootcount value\r\n", __FUNCTION__);
++          }
++          Print (L"%a: BootCountValue is %d\r\n", __FUNCTION__, BootCountValue);
++      }
++
++      /* If boot limit is reached while upgrade_available=1, switch partitions */
++      if (BALENA_OS_BC_LIM <= BootCountValue) {
++         if (BALENA_ROOTFS_INDEX_B == RootFsIndex) {
++            RootFsIndex = BALENA_ROOTFS_INDEX_A;
++         } else {
++            RootFsIndex = BALENA_ROOTFS_INDEX_B;
++         }
++         ErrorPrint(L"%a: Reached bootcount limit, will switch partitions... New index is %d\r\n", __FUNCTION__, RootFsIndex);
++      }
++
++      if (BALENA_ROOTFS_INDEX_B == RootFsIndex) {
++        BalenaOSRootFs = BALENA_ROOTFS_BASE_NAME_B;
++      } else {
++        BalenaOSRootFs = BALENA_ROOTFS_BASE_NAME_A;
++      }
++
++      Status = ProcessExtLinuxConfig (LoadedImage->DeviceHandle, BootParams.BootChain, BalenaOSRootFs, &ExtLinuxConfig, &RootFsDeviceHandle);
+       if (EFI_ERROR (Status)) {
+-        ErrorPrint (L"%a: Unable to process extlinux config: %r\r\n", __FUNCTION__, Status);
++        ErrorPrint (L"%a: ProcessExtLinuxConfig failed on partition %s: %r\r\n", __FUNCTION__, BalenaOSRootFs, Status);
+         BootParams.BootMode = NVIDIA_L4T_BOOTMODE_BOOTIMG;
+         break;
+       }
+Index: edk2-tegra/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.h
+===================================================================
+--- edk2-tegra.orig/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.h
++++ edk2-tegra/edk2-nvidia/Silicon/NVIDIA/Application/L4TLauncher/L4TLauncher.h
+@@ -31,13 +31,22 @@
+ #define BOOT_OS_VARIABLE_NAME          L"BootChainOsCurrent"
+ #define BOOT_OS_OVERRIDE_VARIABLE_NAME L"BootChainOsOverride"
+ #define ROOTFS_INFO_VARIABLE_NAME      L"RootfsInfo"
+-
+ #define ROOTFS_BASE_NAME               L"APP"
++#define BALENA_ROOTFS_BASE_NAME_A      L"resin-rootA"
++#define BALENA_ROOTFS_BASE_NAME_B      L"resin-rootB"
++#define BALENA_BOOT_PARTITION          L"resin-boot"
++#define BALENA_BOOT_CONF_PATH          L"resinOS_uEnv.txt"
++#define BALENA_BOOTCOUNT_FILE_PATH     L"bootcount.env"
++#define MAX_RESINOS_UENV_SIZE          256
++#define BALENA_ROOTFS_INDEX_A          7
++#define BALENA_ROOTFS_INDEX_B          8
++#define BALENA_OS_BC_LIM               3
++#define BALENA_EXTRA_UENV_FILE         L"extra_uEnv.txt"
+ #define BOOTIMG_BASE_NAME              L"kernel"
+ #define BOOTIMG_DTB_BASE_NAME          L"kernel-dtb"
+ #define RECOVERY_BASE_NAME             L"recovery"
+ #define RECOVERY_DTB_BASE_NAME         L"recovery-dtb"
+-
++#define DEFAULT_AGX_ORIN_DTB_NAME      L"tegra194-p3668-all-p3509-0000.dtb"
+ #define EXTLINUX_KEY_TIMEOUT           L"TIMEOUT"
+ #define EXTLINUX_KEY_DEFAULT           L"DEFAULT"
+ #define EXTLINUX_KEY_MENU_TITLE        L"MENU TITLE"
+@@ -47,9 +56,10 @@
+ #define EXTLINUX_KEY_INITRD            L"INITRD"
+ #define EXTLINUX_KEY_FDT               L"FDT"
+ #define EXTLINUX_KEY_APPEND            L"APPEND"
++#define EXTLINUX_GENERIC_FDT           L"default"
+ 
+ #define EXTLINUX_CBOOT_ARG             L"${cbootargs}"
+-
++#define MAX_DTB_PATH_LEN               512 * 2
+ #define MAX_EXTLINUX_OPTIONS           10
+ 
+ /*
diff --git a/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra_35.1.0.bbappend b/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra_35.1.0.bbappend
index 0e45fc1..0f1077c 100644
--- a/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra_35.1.0.bbappend
+++ b/layers/meta-balena-jetson/recipes-bsp/uefi/edk2-firmware-tegra_35.1.0.bbappend
@@ -12,6 +12,10 @@ SRC_URI:append:jetson-xavier = " \
     file://0006-Add-hup-and-rollback-support-agx-xav.patch \
 "
 
+SRC_URI:append:jetson-xavier-nx-devkit = " \
+    file://0007-Add-hup-and-rollback-support-xav-nx-sd.patch \
+"
+
 do_deploy:append() {
      mkdir -p ${DEPLOYDIR}/bootfiles/EFI/BOOT/
      cp ${WORKDIR}/build/images/BOOTAA64.efi ${DEPLOYDIR}/bootfiles/EFI/BOOT/BOOTAA64.efi
diff --git a/layers/meta-balena-jetson/recipes-core/images/balena-image.bbappend b/layers/meta-balena-jetson/recipes-core/images/balena-image.bbappend
index 8414aac..6cee27c 100644
--- a/layers/meta-balena-jetson/recipes-core/images/balena-image.bbappend
+++ b/layers/meta-balena-jetson/recipes-core/images/balena-image.bbappend
@@ -84,3 +84,44 @@ device_specific_configuration:jetson-xavier() {
     done
 }
 
+# Binaries are signed and packed into
+# a partition and the flaser script
+# gets them from there. Can't store them
+# raw due to partition alignments which
+# trigger checksum mismatches during flash
+write_jetson_nx_partitions() {
+    partitions=$(cat ${DEPLOY_DIR_IMAGE}/tegra-binaries/${1})
+    NVIDIA_PART_OFFSET=20480
+    START=${NVIDIA_PART_OFFSET}
+    for n in ${partitions}; do
+      part_name=$(echo $n | cut -d ':' -f 1)
+      file_name=$(echo $n | cut -d ':' -f 2)
+      part_size=$(echo $n | cut -d ':' -f 3)
+      file_path=$(find ${DEPLOY_DIR_IMAGE}/bootfiles -name $file_name)
+      END=$(expr ${START} \+ ${part_size} \- 1)
+      echo "Will write $part_name from ${START} to ${END} part size: $part_size"
+      parted -s ${BALENA_RAW_IMG} unit B mkpart $part_name ${START} ${END}
+      # The padding partition exists to allow for the device specific space to
+      # be a multiple of 4096. We don't write anything to it for the moment.
+      if [ ! "$file_name" = "none.bin" ]; then
+        check_size ${file_path} ${part_size}
+        dd if=$file_path of=${BALENA_RAW_IMG} conv=notrunc seek=$(expr ${START} \/ 512) bs=512
+      fi
+      START=$(expr ${END} \+ 1)
+    done
+}
+
+# We leave this space way larger than currently
+# needed because other larger partitions can be
+# added from one Jetpack release to another
+DEVICE_SPECIFIC_SPACE:jetson-xavier-nx-devkit-emmc = "458752"
+do_image:balenaos-img:jetson-xavier-nx-devkit-emmc[depends] += " tegra194-nxde-flash-dry:do_deploy"
+device_specific_configuration:jetson-xavier-nx-devkit-emmc() {
+    write_jetson_nx_partitions "partition_specification194_nxde.txt"
+}
+
+DEVICE_SPECIFIC_SPACE:jetson-xavier-nx-devkit = "458752"
+do_image:balenaos-img:jetson-xavier-nx-devkit[depends] += " tegra194-nxde-sdcard-flash:do_deploy"
+device_specific_configuration:jetson-xavier-nx-devkit() {
+    write_jetson_nx_partitions "partition_specification194_nxde_sdcard.txt"
+}
diff --git a/layers/meta-balena-jetson/recipes-core/images/balena-image.inc b/layers/meta-balena-jetson/recipes-core/images/balena-image.inc
index 4e763f2..37b1555 100644
--- a/layers/meta-balena-jetson/recipes-core/images/balena-image.inc
+++ b/layers/meta-balena-jetson/recipes-core/images/balena-image.inc
@@ -4,6 +4,12 @@ do_rootfs:balenaos-img:jetson-agx-orin-devkit[depends] += " tegra234-flash-dry:d
                                                 linux-tegra:do_deploy \
 "
 
+do_rootfs:balenaos-img:jetson-xavier-nx-devkit[depends] += " tegra194-nxde-sdcard-flash:do_deploy \
+                                                edk2-firmware-tegra:do_deploy \
+                                                linux-tegra:do_deploy \
+"
+
+
 DTBFILE ?= "${@os.path.basename(d.getVar('KERNEL_DEVICETREE', True).split()[0])}"
 
 IMAGE_INSTALL:append:jetson-agx-orin-devkit = " \
-- 
2.37.2

