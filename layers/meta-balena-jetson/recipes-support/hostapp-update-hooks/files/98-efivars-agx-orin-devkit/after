#!/bin/sh

set -o errexit

# Helper function for triggering the capsule update
# on select Jetson Orin devices. Currently the L4T BSP
# offers this feature for the AGX Orin only. We can't call
# this block of code from a os-helper-* script, because
# the old OS in which this hook is run may not contain the
# os-helper. An alternative to this is not using the after
# hook at all, and use the legacy method as long as the old
# OS doesn't bindmount sysfs in the hostapp-update script

efivars_dir="/sys/firmware/efi/efivars/"
# See https://github.com/OE4T/meta-tegra/blob/master/recipes-bsp/tools/setup-nv-boot-control/setup-nv-boot-control.sh.in
platform_spec_efivar="${efivars_dir}TegraPlatformSpec-781e084c-a330-417c-b678-38e696380cb9"
platform_compat_spec_efivar="${efivars_dir}TegraPlatformCompatSpec-781e084c-a330-417c-b678-38e696380cb9"
os_indications_efivar="${efivars_dir}OsIndications-8be4df61-93ca-11d2-aa0d-00e098032b8c"
tmp_file="/tmp/platformspecfile.bin"

write_jetson_update_efivars() {
    echo "Writing of jetson efivars triggered from old OS hook"
    if [ -d $efivars_dir ]; then
        # If the file already exists, writing to it will fail
        # causing the entire hook to fail
        if [ ! -e ${platform_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "3701-500-0000-J.0-1-1-jetson-agx-orin-devkit-" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_spec_efivar}
            echo "PlatformSpec variable created"
        else
            echo "PlatformSpec variable already exists"
        fi

        if [ ! -e ${platform_compat_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "3701-000-0000--1-0-jetson-agx-orin-devkit-" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_compat_spec_efivar}
            echo "PlatformCompatSpec variable created"
        else
            echo "PlatformCompatSpec variable already exists"
        fi

        printf "%b" '\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00' > ${tmp_file}
        dd if=${tmp_file} of=${os_indications_efivar}
        echo "OsIndications variable written"
    else
        echo "sysfs not accessible!"
        return 1
    fi

    return 0
}

# We should at least have OsIndicationsSupported if
# the directory is populated
if [ $(ls -l ${efivars_dir}OsIndications* | wc -l) -gt 0 ]; then
    write_jetson_update_efivars
else
    echo "efivars directory is is empty"
fi
