#!/bin/sh
set -o errexit

# Script which writes the appropriate
# device tree with embedded cmdline
# and updates the kernel, as well as
# the rest of the bootloader binaries

. /usr/libexec/os-helpers-fs
. /usr/sbin/balena-config-vars

DURING_UPDATE=${DURING_UPDATE:-0}
declare -a UPDATED_PARTITIONS=()
efivars_dir="/sys/firmware/efi/efivars/"
platform_spec_efivar="${efivars_dir}TegraPlatformSpec-781e084c-a330-417c-b678-38e696380cb9"
platform_compat_spec_efivar="${efivars_dir}TegraPlatformCompatSpec-781e084c-a330-417c-b678-38e696380cb9"
os_indications_efivar="${efivars_dir}OsIndications-8be4df61-93ca-11d2-aa0d-00e098032b8c"
tmp_file="/tmp/platformspecfile.bin"
bootloader_device="/dev/mtdblock0"
if cat /proc/device-tree/nvidia,dtsfilename | grep -q "p3701-0000" ; then 
    bootloader_blob="/opt/tegra-binaries/TEGRA_BL_3701_000.Cap.gz"
else
   bootloader_blob="/opt/tegra-binaries/TEGRA_BL_3701_300.Cap.gz"
fi

info_log()
{
    echo "[INFO] $@"
}

check_disable_xudc()
{
    extlinuxfile="/mnt/sysroot/active/current/boot/extlinux/extlinux.conf"

    if [ -e $extlinuxfile ]; then
       if grep -q "l4tver=35.1.0" "${extlinuxfile}"; then
            info_log "Old root is running L4T 35.1.0, will disable tegra-xudc from the device-trees"
            for dtbfile in `find /mnt/sysroot/active/ -name "*.dtb" -type f`; do
                info_log "Disabling tegra-xudc in $dtbfile ...";
                fdtput -t s $dtbfile /xudc status disabled
                fdtput -t s $dtbfile / nvidia,dtsfilename "tegra234-p3701-0000-p3737-0000_xudc_disabled.dts"
                current_xudc_status=$(fdtget $dtbfile /xudc status)
                info_log "$dtbfile now has xudc $current_xudc_status"
            done
        else
            info_log "extlinux file not found in old rootfs"
        fi;
    fi;
}

# While the UEFI firmware accepts loading the uefi bootloader
# from any partition, it doesn't do the same for
# the update capsule, which needs to reside on a partition
# that has the boot,esp flags set. Since we originally
# integrated this device type using the default xml
# which sets these flags for the 'esp' partition only and
# we preferred to include the efi bootloader in our
# own 'resin-boot' partition instead, we do not have the flags
# set by the nvidia flashing tools and have to
# set them now. This way, on the next update the
# UEFI firmware will not load the UEFI bootloader
# from the boot partition, and instead will read the
# capsule and perform the update.
check_and_update_esp_flags() {
    data_type="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
    esp_type="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
    esp_index="5"
    resin_boot_index="6"

    # TODO: remove the hardcoded mmc block
    esp_part_type=$(sfdisk --part-type /dev/mmcblk0 $esp_index)
    resin_boot_part_type=$(sfdisk --part-type /dev/mmcblk0 $resin_boot_index)

    if [ "$esp_type" = "$esp_part_type" ]; then
        info_log "esp partition has esp flag, will be cleared"
        sfdisk --part-type /dev/mmcblk0 $esp_index $data_type
    else
        info_log "no type change needed on esp partition"
    fi

    if [ "$resin_boot_part_type" != "$esp_type" ]; then
        info_log "resin-boot partition does not have esp type, must be added"
        sfdisk --part-type /dev/mmcblk0 $resin_boot_index $esp_type
    else
        info_log "no type change needed on resin-boot partition"
    fi
}

check_disable_xudc
check_and_update_esp_flags

info "Bootloader blob is $bootloader_blob"

# Unzip capsule to the boot partition
mkdir -p /mnt/boot/EFI/UpdateCapsule/
zcat ${bootloader_blob} > /mnt/boot/EFI/UpdateCapsule/TEGRA_BL.Cap
sync

# If the file already exists, writing to it will fail
# causing the entire hook to fail
if [ ! -e ${platform_spec_efivar} ]; then
    printf "\x07\x00\x00\x00" > ${tmp_file}
    printf "%s" "3701-500-0000-J.0-1-1-jetson-agx-orin-devkit-" >> ${tmp_file}
    dd if=${tmp_file} of=${platform_spec_efivar}
fi

if [ ! -e ${platform_compat_spec_efivar} ]; then
    printf "\x07\x00\x00\x00" > ${tmp_file}
    printf "%s" "3701--0000--1--jetson-agx-orin-devkit-" >> ${tmp_file}
    dd if=${tmp_file} of=${platform_compat_spec_efivar}
fi

printf "%b" '\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00' > ${tmp_file}
dd if=${tmp_file} of=${os_indications_efivar}
